{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern full-stack web application built with a React frontend and Express.js backend. The application is a portfolio/agency website for \"VERTEX Studio,\" a comprehensive digital development company. It features a futuristic dark theme design with CSS-based 3D effects, particle animations, and interactive elements. The site showcases a full range of development services from web development to 3D/WebGL, mobile apps, backend solutions, AI/ML, and DevOps. The project uses TypeScript throughout and implements modern web technologies including Framer Motion for animations, and a comprehensive UI component library based on shadcn/ui.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nPreferred language: Russian (русский язык)\n\n# Recent Changes\n\n**August 14, 2025** - Complete Admin Interface Redesign and Migration\n- ✓ Полностью переработан дизайн модальных окон (темная тема с градиентами)\n- ✓ Убраны все фиктивные данные из статистики (+2 сегодня, активные проекты)\n- ✓ Добавлена полная мобильная адаптивность с бургер-меню\n- ✓ Исправлены проблемы с навигацией на маленьких экранах\n- ✓ Добавлено объяснение статуса системы (API отвечает, данные загружаются)\n- ✓ Улучшены цветовые градиенты и общий дизайн интерфейса\n- ✓ Завершена миграция проекта в среду Replit\n- ✓ Добавлено мобильное меню с анимациями и оверлеем\n- ✓ Адаптивные размеры для карточек, кнопок и текста\n\n**August 12, 2025** - Project Migration to Replit Environment\n- ✓ Successfully migrated from Replit Agent to standard Replit environment\n- ✓ Verified all dependencies and TypeScript build tools working correctly\n- ✓ Configured Telegram Bot integration with proper environment variables\n- ✓ Fixed Telegram message formatting with Markdown escaping\n- ✓ Ensured client/server separation and security best practices\n- ✓ Express server running properly on port 5000 with Vite integration\n\n**August 12, 2025** - Mobile Responsiveness Improvements\n- ✓ Fixed process section mobile layout with single-column design\n- ✓ Improved footer layout with stacked elements for mobile\n- ✓ Enhanced navigation bar width and positioning on mobile\n- ✓ Added responsive typography scaling across all sections\n- ✓ Optimized padding and spacing for small screens\n- ✓ Enhanced select dropdown hover effects with neon gradients\n- ✓ Added CSS media queries for mobile and small mobile devices\n- ✓ Improved form elements sizing for better touch interaction\n\n**August 12, 2025** - Added Telegram Bot Integration\n- ✓ Created TelegramService for sending notifications\n- ✓ Integrated contact form submissions with Telegram alerts\n- ✓ Added environment variables: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID\n- ✓ Formatted contact messages with Russian localization\n- ✓ Non-blocking notification sending (doesn't fail form submission)\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Framework**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **3D Graphics**: Three.js with React Three Fiber for 3D scenes and animations\n- **Animations**: Framer Motion for page transitions and interactive animations\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for contact form submissions\n- **Notifications**: Telegram Bot integration for instant contact form notifications\n- **Development**: Hot reload with Vite integration in development mode\n- **Production**: Built and served as static files with API routes\n\n## Data Storage Solutions\n- **Database**: PostgreSQL configured with Drizzle ORM\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Development Storage**: In-memory storage implementation for development\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n\n## Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Session Storage**: Basic session infrastructure with connect-pg-simple (currently unused)\n- **User Model**: Database schema includes users table but no active authentication flow\n\n## Component Structure\n- **Design System**: Comprehensive UI component library with consistent styling\n- **3D Components**: Dedicated Three.js components for particle systems and floating geometry\n- **Page Sections**: Modular components for different website sections (Hero, Services, Portfolio, etc.)\n- **Responsive Design**: Mobile-first approach with custom hooks for device detection\n\n## Development Workflow\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: Comprehensive TypeScript configuration with strict mode\n- **Code Quality**: ESLint integration with Replit-specific error handling\n- **Hot Reload**: Development server with automatic refresh and error overlay\n\n# External Dependencies\n\n## Core Technologies\n- **React Ecosystem**: React 18, React DOM, React Hook Form, TanStack Query\n- **Build Tools**: Vite, esbuild for production builds, TypeScript compiler\n- **Backend Framework**: Express.js with middleware for JSON parsing and CORS\n\n## Database and ORM\n- **Database**: Neon Database (serverless PostgreSQL)\n- **ORM**: Drizzle ORM with Drizzle Kit for schema management\n- **Validation**: Zod for runtime type validation and schema validation\n\n## UI and Styling\n- **Component Library**: Radix UI primitives (30+ components)\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Icons**: Lucide React icon library\n- **Utilities**: class-variance-authority, clsx, tailwind-merge\n\n## 3D Graphics and Animation\n- **3D Engine**: Three.js with React Three Fiber and Drei utilities\n- **Animation**: Framer Motion for page transitions and micro-interactions\n- **WebGL**: Direct Three.js integration for custom 3D scenes\n\n## Development Tools\n- **Package Manager**: npm with lockfile version 3\n- **Development Server**: Vite with Replit-specific plugins\n- **Error Handling**: Runtime error modal for development\n- **Build Target**: ES modules with Node.js compatibility\n\n## Fonts and Assets\n- **Typography**: Google Fonts (Inter, JetBrains Mono, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n- **Images**: Unsplash integration for portfolio images\n- **Static Assets**: Vite-managed asset pipeline with alias resolution","size_bytes":7105},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom colors for the futuristic theme\n        \"deep-black\": \"var(--deep-black)\",\n        \"dark-gray\": \"var(--dark-gray)\",\n        \"neon-cyan\": \"var(--neon-cyan)\",\n        \"glass-white\": \"var(--glass-white)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n        \"jetbrains-mono\": [\"JetBrains Mono\", \"monospace\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 6s ease-in-out infinite\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        \"rotate-slow\": \"rotate-slow 20s linear infinite\",\n        morph: \"morph 8s ease-in-out infinite\",\n        \"particle-float\": \"particle-float 4s infinite ease-in-out\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { \n            transform: \"translateY(0px) rotateX(0deg)\" \n          },\n          \"50%\": { \n            transform: \"translateY(-20px) rotateX(10deg)\" \n          },\n        },\n        glow: {\n          from: { \n            boxShadow: \"0 0 20px hsla(180, 100%, 50%, 0.3)\" \n          },\n          to: { \n            boxShadow: \"0 0 40px hsla(180, 100%, 50%, 0.8)\" \n          },\n        },\n        morph: {\n          \"0%, 100%\": { \n            borderRadius: \"30% 70% 70% 30% / 30% 30% 70% 70%\" \n          },\n          \"25%\": { \n            borderRadius: \"50% 50% 20% 80% / 25% 75% 25% 75%\" \n          },\n          \"50%\": { \n            borderRadius: \"80% 20% 50% 50% / 75% 25% 75% 25%\" \n          },\n          \"75%\": { \n            borderRadius: \"20% 80% 80% 20% / 70% 70% 30% 30%\" \n          },\n        },\n        \"rotate-slow\": {\n          from: {\n            transform: \"rotate(0deg)\",\n          },\n          to: {\n            transform: \"rotate(360deg)\",\n          },\n        },\n        \"particle-float\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0px) translateX(0px)\",\n            opacity: \"0.6\",\n          },\n          \"33%\": {\n            transform: \"translateY(-20px) translateX(10px)\",\n            opacity: \"1\",\n          },\n          \"66%\": {\n            transform: \"translateY(-10px) translateX(-10px)\",\n            opacity: \"0.8\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4784},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertContactSchema,\n  insertTechnologySchema,\n  insertPortfolioProjectSchema,\n  insertServiceProjectSchema,\n  insertTeamRoleSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { telegramService } from \"./telegram\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission\n  app.post(\"/api/contacts\", async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      \n      // Send Telegram notification (don't fail if it doesn't work)\n      telegramService.sendContactNotification(contact).catch(err => {\n        console.error('Failed to send Telegram notification:', err);\n      });\n      \n      res.json({ success: true, contact });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid form data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to submit contact form\" });\n      }\n    }\n  });\n\n  // Get all contacts (for admin purposes)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve contacts\" });\n    }\n  });\n\n  // Technology routes\n  app.get(\"/api/technologies\", async (req, res) => {\n    try {\n      const technologies = await storage.getTechnologies();\n      res.json(technologies);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve technologies\" });\n    }\n  });\n\n  app.post(\"/api/technologies\", async (req, res) => {\n    try {\n      const technologyData = insertTechnologySchema.parse(req.body);\n      const technology = await storage.createTechnology(technologyData);\n      res.json(technology);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create technology\" });\n      }\n    }\n  });\n\n  app.put(\"/api/technologies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = insertTechnologySchema.partial().parse(req.body);\n      const technology = await storage.updateTechnology(id, updateData);\n      res.json(technology);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(404).json({ error: \"Technology not found\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/technologies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteTechnology(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(404).json({ error: \"Technology not found\" });\n    }\n  });\n\n  // Portfolio project routes\n  app.get(\"/api/portfolio-projects\", async (req, res) => {\n    try {\n      const projects = await storage.getPortfolioProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve portfolio projects\" });\n    }\n  });\n\n  app.post(\"/api/portfolio-projects\", async (req, res) => {\n    try {\n      const projectData = insertPortfolioProjectSchema.parse(req.body);\n      const project = await storage.createPortfolioProject(projectData);\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create portfolio project\" });\n      }\n    }\n  });\n\n  app.put(\"/api/portfolio-projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = insertPortfolioProjectSchema.partial().parse(req.body);\n      const project = await storage.updatePortfolioProject(id, updateData);\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(404).json({ error: \"Portfolio project not found\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/portfolio-projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePortfolioProject(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(404).json({ error: \"Portfolio project not found\" });\n    }\n  });\n\n  // Service project routes\n  app.get(\"/api/service-projects\", async (req, res) => {\n    try {\n      const serviceType = req.query.serviceType as string;\n      const projects = await storage.getServiceProjects(serviceType);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve service projects\" });\n    }\n  });\n\n  app.post(\"/api/service-projects\", async (req, res) => {\n    try {\n      const projectData = insertServiceProjectSchema.parse(req.body);\n      const project = await storage.createServiceProject(projectData);\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create service project\" });\n      }\n    }\n  });\n\n  app.put(\"/api/service-projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = insertServiceProjectSchema.partial().parse(req.body);\n      const project = await storage.updateServiceProject(id, updateData);\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(404).json({ error: \"Service project not found\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/service-projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteServiceProject(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(404).json({ error: \"Service project not found\" });\n    }\n  });\n\n  // Team role routes\n  app.get(\"/api/team-roles\", async (req, res) => {\n    try {\n      const roles = await storage.getTeamRoles();\n      res.json(roles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to retrieve team roles\" });\n    }\n  });\n\n  app.post(\"/api/team-roles\", async (req, res) => {\n    try {\n      const roleData = insertTeamRoleSchema.parse(req.body);\n      const role = await storage.createTeamRole(roleData);\n      res.json(role);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create team role\" });\n      }\n    }\n  });\n\n  app.put(\"/api/team-roles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = insertTeamRoleSchema.partial().parse(req.body);\n      const role = await storage.updateTeamRole(id, updateData);\n      res.json(role);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(404).json({ error: \"Team role not found\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/team-roles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteTeamRole(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(404).json({ error: \"Team role not found\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7976},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type Contact, type InsertContact,\n  type Technology, type InsertTechnology,\n  type PortfolioProject, type InsertPortfolioProject,\n  type ServiceProject, type InsertServiceProject,\n  type TeamRole, type InsertTeamRole,\n  users, contacts, technologies, portfolioProjects, serviceProjects, teamRoles\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Contact methods\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n  \n  // Technology methods\n  getTechnologies(): Promise<Technology[]>;\n  createTechnology(technology: InsertTechnology): Promise<Technology>;\n  updateTechnology(id: number, technology: Partial<InsertTechnology>): Promise<Technology>;\n  deleteTechnology(id: number): Promise<void>;\n  \n  // Portfolio project methods\n  getPortfolioProjects(): Promise<PortfolioProject[]>;\n  createPortfolioProject(project: InsertPortfolioProject): Promise<PortfolioProject>;\n  updatePortfolioProject(id: number, project: Partial<InsertPortfolioProject>): Promise<PortfolioProject>;\n  deletePortfolioProject(id: number): Promise<void>;\n  \n  // Service project methods\n  getServiceProjects(serviceType?: string): Promise<ServiceProject[]>;\n  createServiceProject(project: InsertServiceProject): Promise<ServiceProject>;\n  updateServiceProject(id: number, project: Partial<InsertServiceProject>): Promise<ServiceProject>;\n  deleteServiceProject(id: number): Promise<void>;\n  \n  // Team role methods\n  getTeamRoles(): Promise<TeamRole[]>;\n  createTeamRole(role: InsertTeamRole): Promise<TeamRole>;\n  updateTeamRole(id: number, role: Partial<InsertTeamRole>): Promise<TeamRole>;\n  deleteTeamRole(id: number): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contacts: Map<string, Contact>;\n  private technologies: Map<number, Technology>;\n  private portfolioProjects: Map<number, PortfolioProject>;\n  private serviceProjects: Map<number, ServiceProject>;\n  private teamRoles: Map<number, TeamRole>;\n  private idCounter: number;\n\n  constructor() {\n    this.users = new Map();\n    this.contacts = new Map();\n    this.technologies = new Map();\n    this.portfolioProjects = new Map();\n    this.serviceProjects = new Map();\n    this.teamRoles = new Map();\n    this.idCounter = 1;\n    \n    // Инициализируем базовые данные\n    this.initializeBaseData();\n  }\n\n  private initializeBaseData() {\n    // Базовые технологии\n    const baseTechnologies = [\n      { name: \"React\", icon: \"Code\", category: \"frontend\" },\n      { name: \"Node.js\", icon: \"Server\", category: \"backend\" },\n      { name: \"TypeScript\", icon: \"FileCode\", category: \"frontend\" },\n      { name: \"Python\", icon: \"Bot\", category: \"backend\" },\n      { name: \"PostgreSQL\", icon: \"Database\", category: \"database\" },\n      { name: \"Docker\", icon: \"Package\", category: \"devops\" }\n    ];\n\n    baseTechnologies.forEach(tech => {\n      const technology: Technology = {\n        id: this.idCounter++,\n        ...tech,\n        createdAt: new Date()\n      };\n      this.technologies.set(technology.id, technology);\n    });\n\n    // Базовые роли команды\n    const baseRoles = [\n      { title: \"Разработчики\", description: \"Frontend и Backend разработчики\", icon: \"Code\", count: 8, color: \"blue\" },\n      { title: \"UI/UX Дизайнеры\", description: \"Создают красивые интерфейсы\", icon: \"Palette\", count: 3, color: \"purple\" },\n      { title: \"DevOps Инженеры\", description: \"Настройка и поддержка инфраструктуры\", icon: \"Settings\", count: 2, color: \"green\" },\n      { title: \"Проект-менеджеры\", description: \"Управление проектами и координация\", icon: \"Users\", count: 2, color: \"orange\" }\n    ];\n\n    baseRoles.forEach(role => {\n      const teamRole: TeamRole = {\n        id: this.idCounter++,\n        ...role,\n        updatedAt: new Date()\n      };\n      this.teamRoles.set(teamRole.id, teamRole);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact,\n      company: insertContact.company ?? null,\n      phone: insertContact.phone ?? null,\n      service: insertContact.service ?? null,\n      budget: insertContact.budget ?? null,\n      id, \n      createdAt: new Date() \n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).sort(\n      (a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n\n  // Technology methods\n  async getTechnologies(): Promise<Technology[]> {\n    return Array.from(this.technologies.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createTechnology(insertTechnology: InsertTechnology): Promise<Technology> {\n    const technology: Technology = {\n      id: this.idCounter++,\n      ...insertTechnology,\n      createdAt: new Date()\n    };\n    this.technologies.set(technology.id, technology);\n    return technology;\n  }\n\n  async updateTechnology(id: number, updateData: Partial<InsertTechnology>): Promise<Technology> {\n    const existing = this.technologies.get(id);\n    if (!existing) throw new Error('Technology not found');\n    \n    const updated: Technology = { ...existing, ...updateData };\n    this.technologies.set(id, updated);\n    return updated;\n  }\n\n  async deleteTechnology(id: number): Promise<void> {\n    this.technologies.delete(id);\n  }\n\n  // Portfolio project methods\n  async getPortfolioProjects(): Promise<PortfolioProject[]> {\n    return Array.from(this.portfolioProjects.values()).sort(\n      (a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n\n  async createPortfolioProject(insertProject: InsertPortfolioProject): Promise<PortfolioProject> {\n    const project: PortfolioProject = {\n      id: this.idCounter++,\n      ...insertProject,\n      link: insertProject.link ?? null,\n      featured: insertProject.featured ?? false,\n      technologies: insertProject.technologies ?? [],\n      createdAt: new Date()\n    };\n    this.portfolioProjects.set(project.id, project);\n    return project;\n  }\n\n  async updatePortfolioProject(id: number, updateData: Partial<InsertPortfolioProject>): Promise<PortfolioProject> {\n    const existing = this.portfolioProjects.get(id);\n    if (!existing) throw new Error('Portfolio project not found');\n    \n    const updated: PortfolioProject = { ...existing, ...updateData };\n    this.portfolioProjects.set(id, updated);\n    return updated;\n  }\n\n  async deletePortfolioProject(id: number): Promise<void> {\n    this.portfolioProjects.delete(id);\n  }\n\n  // Service project methods\n  async getServiceProjects(serviceType?: string): Promise<ServiceProject[]> {\n    const projects = Array.from(this.serviceProjects.values());\n    const filtered = serviceType ? projects.filter(p => p.serviceType === serviceType) : projects;\n    return filtered.sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createServiceProject(insertProject: InsertServiceProject): Promise<ServiceProject> {\n    const project: ServiceProject = {\n      id: this.idCounter++,\n      ...insertProject,\n      link: insertProject.link ?? null,\n      technologies: insertProject.technologies ?? [],\n      createdAt: new Date()\n    };\n    this.serviceProjects.set(project.id, project);\n    return project;\n  }\n\n  async updateServiceProject(id: number, updateData: Partial<InsertServiceProject>): Promise<ServiceProject> {\n    const existing = this.serviceProjects.get(id);\n    if (!existing) throw new Error('Service project not found');\n    \n    const updated: ServiceProject = { ...existing, ...updateData };\n    this.serviceProjects.set(id, updated);\n    return updated;\n  }\n\n  async deleteServiceProject(id: number): Promise<void> {\n    this.serviceProjects.delete(id);\n  }\n\n  // Team role methods\n  async getTeamRoles(): Promise<TeamRole[]> {\n    return Array.from(this.teamRoles.values()).sort((a, b) => a.title.localeCompare(b.title));\n  }\n\n  async createTeamRole(insertRole: InsertTeamRole): Promise<TeamRole> {\n    const role: TeamRole = {\n      id: this.idCounter++,\n      ...insertRole,\n      count: insertRole.count ?? 1,\n      color: insertRole.color ?? \"blue\",\n      updatedAt: new Date()\n    };\n    this.teamRoles.set(role.id, role);\n    return role;\n  }\n\n  async updateTeamRole(id: number, updateData: Partial<InsertTeamRole>): Promise<TeamRole> {\n    const existing = this.teamRoles.get(id);\n    if (!existing) throw new Error('Team role not found');\n    \n    const updated: TeamRole = { ...existing, ...updateData, updatedAt: new Date() };\n    this.teamRoles.set(id, updated);\n    return updated;\n  }\n\n  async deleteTeamRole(id: number): Promise<void> {\n    this.teamRoles.delete(id);\n  }\n}\n\n// DatabaseStorage implementation for PostgreSQL\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Contact methods\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db.insert(contacts).values(insertContact).returning();\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts).orderBy(contacts.createdAt);\n  }\n\n  // Technology methods\n  async getTechnologies(): Promise<Technology[]> {\n    return await db.select().from(technologies).orderBy(technologies.name);\n  }\n\n  async createTechnology(insertTechnology: InsertTechnology): Promise<Technology> {\n    const [technology] = await db.insert(technologies).values(insertTechnology).returning();\n    return technology;\n  }\n\n  async updateTechnology(id: number, updateData: Partial<InsertTechnology>): Promise<Technology> {\n    const [technology] = await db.update(technologies)\n      .set(updateData)\n      .where(eq(technologies.id, id))\n      .returning();\n    if (!technology) throw new Error('Technology not found');\n    return technology;\n  }\n\n  async deleteTechnology(id: number): Promise<void> {\n    await db.delete(technologies).where(eq(technologies.id, id));\n  }\n\n  // Portfolio project methods\n  async getPortfolioProjects(): Promise<PortfolioProject[]> {\n    return await db.select().from(portfolioProjects).orderBy(portfolioProjects.createdAt);\n  }\n\n  async createPortfolioProject(insertProject: InsertPortfolioProject): Promise<PortfolioProject> {\n    const [project] = await db.insert(portfolioProjects).values(insertProject).returning();\n    return project;\n  }\n\n  async updatePortfolioProject(id: number, updateData: Partial<InsertPortfolioProject>): Promise<PortfolioProject> {\n    const [project] = await db.update(portfolioProjects)\n      .set(updateData)\n      .where(eq(portfolioProjects.id, id))\n      .returning();\n    if (!project) throw new Error('Portfolio project not found');\n    return project;\n  }\n\n  async deletePortfolioProject(id: number): Promise<void> {\n    await db.delete(portfolioProjects).where(eq(portfolioProjects.id, id));\n  }\n\n  // Service project methods\n  async getServiceProjects(serviceType?: string): Promise<ServiceProject[]> {\n    if (serviceType) {\n      return await db.select().from(serviceProjects)\n        .where(eq(serviceProjects.serviceType, serviceType))\n        .orderBy(serviceProjects.createdAt);\n    }\n    return await db.select().from(serviceProjects).orderBy(serviceProjects.createdAt);\n  }\n\n  async createServiceProject(insertProject: InsertServiceProject): Promise<ServiceProject> {\n    const [project] = await db.insert(serviceProjects).values(insertProject).returning();\n    return project;\n  }\n\n  async updateServiceProject(id: number, updateData: Partial<InsertServiceProject>): Promise<ServiceProject> {\n    const [project] = await db.update(serviceProjects)\n      .set(updateData)\n      .where(eq(serviceProjects.id, id))\n      .returning();\n    if (!project) throw new Error('Service project not found');\n    return project;\n  }\n\n  async deleteServiceProject(id: number): Promise<void> {\n    await db.delete(serviceProjects).where(eq(serviceProjects.id, id));\n  }\n\n  // Team role methods\n  async getTeamRoles(): Promise<TeamRole[]> {\n    return await db.select().from(teamRoles).orderBy(teamRoles.title);\n  }\n\n  async createTeamRole(insertRole: InsertTeamRole): Promise<TeamRole> {\n    const [role] = await db.insert(teamRoles).values(insertRole).returning();\n    return role;\n  }\n\n  async updateTeamRole(id: number, updateData: Partial<InsertTeamRole>): Promise<TeamRole> {\n    const [role] = await db.update(teamRoles)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(teamRoles.id, id))\n      .returning();\n    if (!role) throw new Error('Team role not found');\n    return role;\n  }\n\n  async deleteTeamRole(id: number): Promise<void> {\n    await db.delete(teamRoles).where(eq(teamRoles.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14254},"server/telegram.ts":{"content":"import type { Contact } from \"@shared/schema\";\n\nexport class TelegramService {\n  private botToken: string;\n  private chatId: string;\n\n  constructor() {\n    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';\n    this.chatId = process.env.TELEGRAM_CHAT_ID || '';\n  }\n\n  private escapeHtml(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }\n\n  private formatContactMessage(contact: Contact): string {\n    const lines = [\n      '🔥 <b>Новая заявка с сайта VERTEX Studio!</b>',\n      '',\n      `👤 <b>Имя:</b> ${this.escapeHtml(contact.name || 'Не указано')}`,\n      `📧 <b>Email:</b> ${this.escapeHtml(contact.email || 'Не указан')}`,\n    ];\n\n    if (contact.company) {\n      lines.push(`🏢 <b>Компания:</b> ${this.escapeHtml(contact.company)}`);\n    }\n\n    if (contact.phone) {\n      lines.push(`📱 <b>Телефон:</b> ${this.escapeHtml(contact.phone)}`);\n    }\n\n    if (contact.service) {\n      lines.push(`🛠 <b>Услуга:</b> ${this.escapeHtml(contact.service)}`);\n    }\n\n    if (contact.budget) {\n      lines.push(`💰 <b>Бюджет:</b> ${this.escapeHtml(contact.budget)}`);\n    }\n\n    if (contact.message) {\n      lines.push('');\n      lines.push('💬 <b>Сообщение:</b>');\n      lines.push(`<i>${this.escapeHtml(contact.message)}</i>`);\n    }\n\n    lines.push('');\n    lines.push(`📅 <b>Дата:</b> ${contact.createdAt ? new Date(contact.createdAt).toLocaleString('ru-RU') : new Date().toLocaleString('ru-RU')}`);\n\n    return lines.join('\\n');\n  }\n\n  async sendContactNotification(contact: Contact): Promise<boolean> {\n    if (!this.botToken || !this.chatId) {\n      console.error('Telegram bot token or chat ID not configured');\n      return false;\n    }\n\n    const message = this.formatContactMessage(contact);\n    const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;\n\n\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chat_id: this.chatId,\n          text: message,\n          parse_mode: 'HTML',\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Failed to send Telegram message:', errorText);\n        return false;\n      }\n\n      console.log('Telegram notification sent successfully');\n      return true;\n    } catch (error) {\n      console.error('Error sending Telegram notification:', error);\n      return false;\n    }\n  }\n}\n\nexport const telegramService = new TelegramService();","size_bytes":2685},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  phone: text(\"phone\"),\n  service: text(\"service\"),\n  budget: text(\"budget\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Таблица для технологий\nexport const technologies = pgTable(\"technologies\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(), // название иконки из lucide-react\n  category: text(\"category\").notNull(), // frontend, backend, mobile, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Таблица для проектов портфолио\nexport const portfolioProjects = pgTable(\"portfolio_projects\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(), // URL изображения\n  technologies: text(\"technologies\").array().notNull().default([]), // массив технологий\n  link: text(\"link\"), // ссылка на проект\n  featured: boolean(\"featured\").default(false), // показывать на главной\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Таблица для проектов услуг\nexport const serviceProjects = pgTable(\"service_projects\", {\n  id: serial(\"id\").primaryKey(),\n  serviceType: text(\"service_type\").notNull(), // web-development, mobile-development, etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  technologies: text(\"technologies\").array().notNull().default([]),\n  link: text(\"link\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Таблица для ролей команды\nexport const teamRoles = pgTable(\"team_roles\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(), // название иконки\n  count: integer(\"count\").notNull().default(1), // количество участников\n  color: text(\"color\").notNull().default(\"blue\"), // цвет для UI\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Схемы для валидации\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTechnologySchema = createInsertSchema(technologies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPortfolioProjectSchema = createInsertSchema(portfolioProjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceProjectSchema = createInsertSchema(serviceProjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeamRoleSchema = createInsertSchema(teamRoles).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Типы\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertTechnology = z.infer<typeof insertTechnologySchema>;\nexport type Technology = typeof technologies.$inferSelect;\nexport type InsertPortfolioProject = z.infer<typeof insertPortfolioProjectSchema>;\nexport type PortfolioProject = typeof portfolioProjects.$inferSelect;\nexport type InsertServiceProject = z.infer<typeof insertServiceProjectSchema>;\nexport type ServiceProject = typeof serviceProjects.$inferSelect;\nexport type InsertTeamRole = z.infer<typeof insertTeamRoleSchema>;\nexport type TeamRole = typeof teamRoles.$inferSelect;\n","size_bytes":4282},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport { AdminPage } from \"@/pages/admin\";\nimport { AdminLoginPage } from \"@/pages/admin-login\";\nimport NotFound from \"@/pages/not-found\";\nimport WebDevelopmentPage from \"@/pages/services/web-development\";\nimport MobileDevelopmentPage from \"@/pages/services/mobile-development\";\nimport ThreeDWebGLPage from \"@/pages/services/3d-webgl\";\nimport BackendAPIPage from \"@/pages/services/backend-api\";\nimport AIMLPage from \"@/pages/services/ai-ml\";\nimport DevOpsCloudPage from \"@/pages/services/devops-cloud\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin/login\" component={AdminLoginPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/services/web-development\" component={WebDevelopmentPage} />\n      <Route path=\"/services/mobile-development\" component={MobileDevelopmentPage} />\n      <Route path=\"/services/3d-webgl\" component={ThreeDWebGLPage} />\n      <Route path=\"/services/backend-api\" component={BackendAPIPage} />\n      <Route path=\"/services/ai-ml\" component={AIMLPage} />\n      <Route path=\"/services/devops-cloud\" component={DevOpsCloudPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1767},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(180 100% 50%);\n  --primary-foreground: hsl(206 62% 4%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(180 100% 50%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(180 100% 50%);\n  --ring-neon-cyan: hsl(180 100% 50%);\n  --chart-1: hsl(180 100% 50%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(180 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(180 100% 50%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(180 100% 50%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 1.3rem;\n  \n  /* Custom properties for the futuristic theme */\n  --deep-black: hsl(0 0% 3.9216%);\n  --dark-gray: hsl(0 0% 10.1961%);\n  --neon-cyan: hsl(180 100% 50%);\n  --glass-white: hsla(0 0% 100% / 0.1);\n  --glass-white-border: hsla(0 0% 100% / 0.1);\n}\n\n.dark {\n  --background: hsl(0 0% 3.9216%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(0 0% 10.1961%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(0 0% 8%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(180 100% 50%);\n  --primary-foreground: hsl(0 0% 10%);\n  --secondary: hsl(0 0% 15%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 15%);\n  --muted-foreground: hsl(0 0% 70%);\n  --accent: hsl(0 0% 15%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 15%);\n  --ring: hsl(180 100% 50%);\n  --chart-1: hsl(180 100% 50%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 10.1961%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(180 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 10%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(180 100% 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-deep-black text-white font-sans antialiased overflow-x-hidden;\n    font-family: var(--font-sans);\n    color: hsl(0 0% 100%);\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  /* Custom animations - simplified */\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n    }\n    50% { \n      transform: translateY(-10px); \n    }\n  }\n\n  @keyframes glow {\n    from { \n      box-shadow: 0 0 20px hsla(180 100% 50% / 0.3);\n    }\n    to { \n      box-shadow: 0 0 20px hsla(180 100% 50% / 0.6);\n    }\n  }\n\n  @keyframes morph {\n    0%, 100% { \n      border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; \n    }\n    25% { \n      border-radius: 50% 50% 20% 80% / 25% 75% 25% 75%; \n    }\n    50% { \n      border-radius: 80% 20% 50% 50% / 75% 25% 75% 25%; \n    }\n    75% { \n      border-radius: 20% 80% 80% 20% / 70% 70% 30% 30%; \n    }\n  }\n\n  @keyframes rotate-slow {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Particle animation removed */\n\n  .animate-float {\n    animation: float 8s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 3s ease-in-out infinite alternate;\n  }\n\n  .animate-morph {\n    animation: morph 8s ease-in-out infinite;\n  }\n\n  .animate-rotate-slow {\n    animation: rotate-slow 20s linear infinite;\n  }\n\n  /* Particle animation class removed */\n\n  /* Glass morphism effect */\n  .glass-morphism {\n    background: hsla(0 0% 100% / 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid hsla(0 0% 100% / 0.1);\n  }\n\n  /* Floating card with 3D effects */\n  .floating-card {\n    transform-style: preserve-3d;\n    transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n\n  .floating-card:hover {\n    transform: perspective(1000px) rotateX(10deg) rotateY(10deg) translateZ(20px);\n  }\n\n  /* 3D text effect */\n  .text-3d {\n    text-shadow: 0 0 20px hsla(180 100% 50% / 0.5);\n  }\n\n  /* Hero background gradient */\n  .hero-bg {\n    background: \n      radial-gradient(circle at 20% 50%, hsla(180 100% 50% / 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 80% 20%, hsla(180 100% 50% / 0.05) 0%, transparent 50%),\n      radial-gradient(circle at 40% 80%, hsla(0 0% 100% / 0.02) 0%, transparent 50%);\n  }\n\n  /* Particle system removed */\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--deep-black);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--neon-cyan);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsla(180 100% 50% / 0.8);\n  }\n}\n\n/* Custom color utilities */\n.bg-deep-black {\n  background-color: var(--deep-black);\n}\n\n.bg-dark-gray {\n  background-color: var(--dark-gray);\n}\n\n.bg-neon-cyan {\n  background-color: var(--neon-cyan);\n}\n\n.text-neon-cyan {\n  color: var(--neon-cyan);\n}\n\n.border-neon-cyan {\n  border-color: var(--neon-cyan);\n}\n\n.bg-glass-white {\n  background-color: var(--glass-white);\n}\n\n.border-glass-white {\n  border-color: var(--glass-white-border);\n}\n\n/* Select component styles for better dark theme support */\n[data-radix-select-content] {\n  background-color: var(--deep-black) !important;\n  border-color: hsl(210 5.2632% 14.9020%) !important;\n  box-shadow: 0 10px 38px -10px rgba(22, 23, 24, 0.35), 0 10px 20px -15px rgba(22, 23, 24, 0.2) !important;\n}\n\n[data-radix-select-item] {\n  color: hsl(0 0% 100%) !important;\n}\n\n[data-radix-select-item][data-highlighted] {\n  background: linear-gradient(90deg, hsla(180 100% 50% / 0.2) 0%, hsla(180 100% 50% / 0.1) 100%) !important;\n  color: hsl(180 100% 50%) !important;\n  box-shadow: 0 0 10px hsla(180 100% 50% / 0.2) !important;\n  transition: all 0.2s ease-in-out !important;\n}\n\n[data-radix-select-item][data-state=\"checked\"] {\n  background: linear-gradient(90deg, hsla(180 100% 50% / 0.25) 0%, hsla(180 100% 50% / 0.15) 100%) !important;\n  color: hsl(180 100% 50%) !important;\n  font-weight: 500 !important;\n  box-shadow: 0 0 15px hsla(180 100% 50% / 0.3) !important;\n}\n\n[data-radix-select-trigger] [data-placeholder] {\n  color: hsl(210 3.3898% 46.2745%) !important;\n}\n\n/* Additional admin panel styling fixes */\n.bg-gray-800 {\n  background-color: hsl(0 0% 12%) !important;\n  color: hsl(0 0% 100%) !important;\n}\n\n.border-gray-600 {\n  border-color: hsl(0 0% 25%) !important;\n}\n\n.text-white {\n  color: hsl(0 0% 100%) !important;\n}\n\n.text-gray-400 {\n  color: hsl(0 0% 70%) !important;\n}\n\n.text-gray-300 {\n  color: hsl(0 0% 80%) !important;\n}\n\n/* Form input styling fixes */\ninput[type=\"text\"], \ninput[type=\"email\"], \ninput[type=\"url\"],\ntextarea {\n  background-color: hsl(0 0% 12%) !important;\n  color: hsl(0 0% 100%) !important;\n  border-color: hsl(0 0% 25%) !important;\n}\n\ninput[type=\"text\"]:focus, \ninput[type=\"email\"]:focus, \ninput[type=\"url\"]:focus,\ntextarea:focus {\n  border-color: hsl(180 100% 50%) !important;\n  box-shadow: 0 0 0 1px hsl(180 100% 50%) !important;\n}\n\n/* Tabs styling fixes */\n[data-state=\"active\"] {\n  background: linear-gradient(90deg, hsl(180 100% 50%) 0%, hsl(200 100% 60%) 100%) !important;\n  color: hsl(0 0% 10%) !important;\n}\n\n/* Badge styling fixes */\n.border-gray-500\\/50 {\n  border-color: hsl(0 0% 40%) !important;\n}\n\n.bg-gray-800\\/50 {\n  background-color: hsl(0 0% 12%) !important;\n}\n\n[data-radix-select-value] {\n  color: hsl(0 0% 100%) !important;\n}\n\n[data-radix-select-value][data-placeholder] {\n  color: hsl(210 3.3898% 46.2745%) !important;\n}\n\n/* Additional specific selector for placeholder text */\n.select-placeholder {\n  color: hsl(210 3.3898% 46.2745%) !important;\n}\n\n/* Mobile-specific improvements */\n@media (max-width: 768px) {\n  .container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  \n  .text-3d {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n  }\n  \n  .glass-morphism {\n    backdrop-filter: blur(8px);\n    background: rgba(255, 255, 255, 0.08);\n  }\n  \n  .floating-card {\n    transform: none !important;\n  }\n  \n  /* Ensure text remains readable on mobile */\n  .hero-content h1 {\n    font-size: 2rem;\n    line-height: 1.2;\n  }\n  \n  .hero-content p {\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n  \n  /* Better spacing for mobile */\n  section {\n    padding-top: 4rem !important;\n    padding-bottom: 4rem !important;\n  }\n  \n  /* Mobile navigation improvements */\n  .mobile-menu {\n    background: rgba(0, 0, 0, 0.95);\n    backdrop-filter: blur(20px);\n  }\n  \n  /* Adjust button sizes for touch */\n  button {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Form improvements */\n  input, textarea, select {\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n}\n\n/* Small mobile devices */\n@media (max-width: 480px) {\n  .container {\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n  }\n  \n  /* Even smaller text on very small screens */\n  .hero-content h1 {\n    font-size: 1.75rem;\n    line-height: 1.1;\n  }\n  \n  .hero-content p {\n    font-size: 0.9rem;\n  }\n  \n  /* Reduce section padding further */\n  section {\n    padding-top: 3rem !important;\n    padding-bottom: 3rem !important;\n  }\n}\n","size_bytes":10169},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/contact-section.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { MapPin, Mail, Phone, Linkedin, Github, Twitter, Send } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { insertContactSchema, type InsertContact } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\n\nconst contactInfo = [\n  {\n    icon: MapPin,\n    title: 'Адрес',\n    description: 'Москва, ул. Технологическая, 15',\n  },\n  {\n    icon: Mail,\n    title: 'Email',\n    description: 'hello@vertexstudio.dev',\n  },\n  {\n    icon: Phone,\n    title: 'Телефон',\n    description: '+7 (495) 123-45-67',\n  },\n];\n\nconst socialLinks = [\n  { icon: Linkedin, href: '#' },\n  { icon: Github, href: '#' },\n  { icon: Twitter, href: '#' },\n];\n\nexport function ContactSection() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { elementRef, hasTriggered } = useScrollTrigger();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      company: '',\n      phone: '',\n      service: '',\n      budget: '',\n      message: '',\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      const response = await apiRequest('POST', '/api/contacts', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Сообщение отправлено!',\n        description: 'Мы свяжемся с вами в ближайшее время.',\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Ошибка отправки',\n        description: error.message || 'Попробуйте еще раз позже.',\n        variant: 'destructive',\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    setIsSubmitting(true);\n    contactMutation.mutate(data);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 30, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.6,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"contact\" className=\"py-16 md:py-24 lg:py-32 relative bg-dark-gray\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-light mb-6 text-3d\">\n            Свяжитесь <span className=\"text-neon-cyan\">с Нами</span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-400 max-w-2xl mx-auto\">\n            Готовы воплотить ваши идеи в передовые цифровые решения\n          </p>\n        </motion.div>\n\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={hasTriggered ? \"visible\" : \"hidden\"}\n          className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 items-start lg:items-center\"\n        >\n          <div className=\"space-y-8\">\n            {contactInfo.map((info, index) => (\n              <motion.div\n                key={info.title}\n                variants={itemVariants}\n                whileHover={{ x: 10, scale: 1.02 }}\n                className=\"floating-card glass-morphism p-6 rounded-2xl\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <motion.div\n                    whileHover={{ rotateZ: 360 }}\n                    transition={{ duration: 0.6 }}\n                    className=\"w-12 h-12 bg-neon-cyan/10 rounded-xl flex items-center justify-center\"\n                  >\n                    <info.icon className=\"w-5 h-5 text-neon-cyan\" />\n                  </motion.div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">{info.title}</h4>\n                    <p className=\"text-gray-400\">{info.description}</p>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n\n            <motion.div variants={itemVariants} className=\"pt-8\">\n              <h4 className=\"font-medium mb-4\">Следите за нами</h4>\n              <div className=\"flex space-x-4\">\n                {socialLinks.map((social, index) => (\n                  <motion.a\n                    key={index}\n                    href={social.href}\n                    whileHover={{ scale: 1.2, rotateZ: 360 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"w-12 h-12 glass-morphism rounded-xl flex items-center justify-center hover:bg-neon-cyan/20 transition-all\"\n                  >\n                    <social.icon className=\"w-5 h-5 text-neon-cyan\" />\n                  </motion.a>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            variants={itemVariants}\n            className=\"floating-card glass-morphism p-6 lg:p-8 rounded-3xl\"\n          >\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Имя *\n                  </label>\n                  <Input\n                    {...form.register('name')}\n                    placeholder=\"Ваше имя\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-red-400 text-sm mt-1\">\n                      {form.formState.errors.name.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Компания\n                  </label>\n                  <Input\n                    {...form.register('company')}\n                    placeholder=\"Название компании\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Email *\n                  </label>\n                  <Input\n                    {...form.register('email')}\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-red-400 text-sm mt-1\">\n                      {form.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Телефон\n                  </label>\n                  <Input\n                    {...form.register('phone')}\n                    type=\"tel\"\n                    placeholder=\"+7 (XXX) XXX-XX-XX\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Услуга\n                </label>\n                <Select onValueChange={(value) => form.setValue('service', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Выберите услугу\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"web-dev\">Веб-Разработка</SelectItem>\n                    <SelectItem value=\"3d-webgl\">3D и WebGL</SelectItem>\n                    <SelectItem value=\"mobile\">Мобильная Разработка</SelectItem>\n                    <SelectItem value=\"backend\">Backend & API</SelectItem>\n                    <SelectItem value=\"ai-ml\">ИИ и ML</SelectItem>\n                    <SelectItem value=\"devops\">DevOps & Cloud</SelectItem>\n                    <SelectItem value=\"consulting\">Консультации</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Бюджет проекта\n                </label>\n                <Select onValueChange={(value) => form.setValue('budget', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Выберите диапазон\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"50k-100k\">50,000 - 100,000 ₽</SelectItem>\n                    <SelectItem value=\"100k-500k\">100,000 - 500,000 ₽</SelectItem>\n                    <SelectItem value=\"500k-1m\">500,000 - 1,000,000 ₽</SelectItem>\n                    <SelectItem value=\"1m+\">1,000,000+ ₽</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Сообщение *\n                </label>\n                <Textarea\n                  {...form.register('message')}\n                  rows={4}\n                  placeholder=\"Расскажите о вашем проекте...\"\n                  className=\"resize-none\"\n                />\n                {form.formState.errors.message && (\n                  <p className=\"text-red-400 text-sm mt-1\">\n                    {form.formState.errors.message.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id=\"privacy\"\n                  className=\"mt-1 border-gray-700 data-[state=checked]:bg-neon-cyan data-[state=checked]:border-neon-cyan\"\n                />\n                <label htmlFor=\"privacy\" className=\"text-sm text-gray-400\">\n                  Я согласен с{' '}\n                  <a href=\"#\" className=\"text-neon-cyan hover:underline\">\n                    политикой конфиденциальности\n                  </a>{' '}\n                  и обработкой персональных данных\n                </label>\n              </div>\n\n              <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-neon-cyan text-deep-black font-medium py-4 px-8 rounded-xl hover:bg-neon-cyan/90 transition-all duration-300 group\"\n                >\n                  <span className=\"flex items-center justify-center space-x-2\">\n                    <span>\n                      {isSubmitting ? 'Отправляется...' : 'Отправить сообщение'}\n                    </span>\n                    <motion.div\n                      animate={{ x: isSubmitting ? 0 : [0, 5, 0] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </motion.div>\n                  </span>\n                </Button>\n              </motion.div>\n            </form>\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12443},"client/src/components/footer.tsx":{"content":"import { motion } from 'framer-motion';\n\nexport function Footer() {\n  return (\n    <footer className=\"py-8 md:py-12 lg:py-16 relative border-t border-gray-800\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center\"\n        >\n          <div className=\"text-3xl font-jetbrains-mono font-bold text-neon-cyan mb-4\">\n            VERTEX\n          </div>\n          <p className=\"text-gray-400 mb-8 max-w-md mx-auto\">\n            Создаем будущее цифровых технологий сегодня\n          </p>\n          <div className=\"flex flex-col md:flex-row justify-center items-center space-y-4 md:space-y-0 md:space-x-8 text-sm text-gray-500\">\n            <p className=\"text-center\">&copy; 2024 VERTEX Studio. Все права защищены.</p>\n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-6\">\n              <motion.a\n                href=\"#\"\n                whileHover={{ color: '#00ffff' }}\n                className=\"transition-colors text-center hover:underline\"\n              >\n                Политика конфиденциальности\n              </motion.a>\n              <motion.a\n                href=\"#\"\n                whileHover={{ color: '#00ffff' }}\n                className=\"transition-colors text-center hover:underline\"\n              >\n                Пользовательское соглашение\n              </motion.a>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1695},"client/src/components/hero-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { HeroScene } from './three/hero-scene';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\n\nexport function HeroSection() {\n  const { elementRef } = useScrollTrigger();\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 30, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.8,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  const scrollToServices = () => {\n    const element = document.querySelector('#services');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const scrollToContact = () => {\n    const element = document.querySelector('#contact');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section\n      ref={elementRef}\n      id=\"hero\"\n      className=\"min-h-screen flex items-center justify-center relative hero-bg overflow-hidden\"\n    >\n      {/* Background removed - no more floating particles */}\n\n      {/* 3D Scene */}\n      <HeroScene />\n\n      {/* Central Morphing Element */}\n      <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n        <div className=\"w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96 glass-morphism rounded-full animate-morph relative\">\n          <div className=\"absolute inset-2 md:inset-4 bg-gradient-to-r from-neon-cyan/20 to-transparent rounded-full animate-rotate-slow\"></div>\n          <div className=\"absolute inset-4 md:inset-8 border border-neon-cyan/30 rounded-full animate-glow\"></div>\n        </div>\n      </div>\n\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"container mx-auto px-6 relative z-10 text-center\"\n      >\n        <motion.h1\n          variants={itemVariants}\n          className=\"hero-content text-4xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-light mb-6 text-3d\"\n        >\n          <motion.span\n            className=\"block\"\n          >\n            ПЕРЕДОВАЯ\n          </motion.span>\n          <motion.span\n            className=\"block text-neon-cyan\"\n          >\n            РАЗРАБОТКА\n          </motion.span>\n        </motion.h1>\n\n        <motion.p\n          variants={itemVariants}\n          className=\"hero-content text-base sm:text-lg md:text-xl lg:text-2xl font-light text-gray-300 mb-8 md:mb-12 max-w-2xl mx-auto\"\n        >\n          Превращаем идеи в революционные цифровые продукты с помощью инновационных технологий и креативного подхода\n        </motion.p>\n\n        <motion.div\n          variants={itemVariants}\n          className=\"flex flex-col sm:flex-row gap-4 md:gap-6 justify-center\"\n        >\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={scrollToServices}\n            className=\"glass-morphism px-8 py-4 rounded-full hover:bg-neon-cyan/10 transition-all duration-300 group\"\n          >\n            <span className=\"group-hover:text-neon-cyan transition-colors\">\n              Посмотреть проекты\n            </span>\n          </motion.button>\n          \n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={scrollToContact}\n            className=\"border border-neon-cyan px-8 py-4 rounded-full hover:bg-neon-cyan hover:text-deep-black transition-all duration-300\"\n          >\n            Связаться с нами\n          </motion.button>\n        </motion.div>\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":3884},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Menu, X } from 'lucide-react';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\nexport function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navItems = [\n    { href: '#hero', label: 'Главная' },\n    { href: '#services', label: 'Услуги' },\n    { href: '#portfolio', label: 'Портфолио' },\n    { href: '#team', label: 'Команда' },\n    { href: '#contact', label: 'Контакты' },\n  ];\n\n  const scrollToSection = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <>\n      <motion.nav\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        className={`fixed top-4 md:top-6 left-1/2 transform -translate-x-1/2 z-50 transition-all duration-300 ${\n          isScrolled ? 'glass-morphism' : 'glass-morphism'\n        } px-4 md:px-8 py-3 md:py-4 rounded-full w-[calc(100%-2rem)] md:w-auto max-w-5xl`}\n      >\n        <div className=\"flex items-center space-x-8\">\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            className=\"text-neon-cyan font-jetbrains-mono font-bold text-xl cursor-pointer\"\n            onClick={() => scrollToSection('#hero')}\n          >\n            VERTEX\n          </motion.div>\n          \n          {!isMobile ? (\n            <div className=\"flex items-center space-x-6\">\n              {navItems.map((item) => (\n                <motion.button\n                  key={item.href}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => scrollToSection(item.href)}\n                  className=\"hover:text-neon-cyan transition-colors duration-300 text-sm font-medium\"\n                >\n                  {item.label}\n                </motion.button>\n              ))}\n            </div>\n          ) : (\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"text-neon-cyan\"\n            >\n              {isOpen ? <X size={24} /> : <Menu size={24} />}\n            </button>\n          )}\n        </div>\n      </motion.nav>\n\n      {/* Mobile Menu */}\n      <AnimatePresence>\n        {isOpen && isMobile && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"fixed top-24 left-1/2 transform -translate-x-1/2 z-40 glass-morphism rounded-2xl p-6 w-64\"\n          >\n            <div className=\"flex flex-col space-y-4\">\n              {navItems.map((item) => (\n                <motion.button\n                  key={item.href}\n                  whileHover={{ x: 10 }}\n                  onClick={() => scrollToSection(item.href)}\n                  className=\"text-left hover:text-neon-cyan transition-colors duration-300 py-2\"\n                >\n                  {item.label}\n                </motion.button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n","size_bytes":3538},"client/src/components/portfolio-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { ExternalLink } from 'lucide-react';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\nimport { useQuery } from '@tanstack/react-query';\nimport type { PortfolioProject } from '@shared/schema';\n\nexport function PortfolioSection() {\n  const { elementRef, hasTriggered } = useScrollTrigger();\n  \n  // Загружаем данные портфолио из базы данных\n  const { data: portfolioItems = [], isLoading } = useQuery<PortfolioProject[]>({\n    queryKey: ['/api/portfolio-projects'],\n  });\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n        delayChildren: 0.3,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 50, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.8,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"portfolio\" className=\"py-16 md:py-24 lg:py-32 relative bg-dark-gray\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-light mb-6 text-3d\">\n            Наше <span className=\"text-neon-cyan\">Портфолио</span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-400 max-w-2xl mx-auto\">\n            Проекты, которые определяют будущее цифровых технологий\n          </p>\n        </motion.div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan\"></div>\n            <p className=\"mt-4 text-gray-400\">Загружаем проекты...</p>\n          </div>\n        ) : (\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={hasTriggered ? \"visible\" : \"hidden\"}\n            className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\"\n          >\n            {portfolioItems.filter(item => item.featured).map((project, index) => (\n            <motion.div\n              key={project.title}\n              variants={itemVariants}\n              className=\"floating-card group cursor-pointer\"\n            >\n              <div className=\"relative overflow-hidden rounded-3xl glass-morphism h-64 md:h-80 mb-4 md:mb-6\">\n                <motion.img\n                  whileHover={{ scale: 1.1 }}\n                  transition={{ duration: 0.7 }}\n                  src={project.image}\n                  alt={project.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  whileHover={{ opacity: 1 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"absolute inset-0 bg-gradient-to-t from-neon-cyan/20 to-transparent\"\n                />\n                <div className=\"absolute top-4 right-4 glass-morphism px-4 py-2 rounded-full\">\n                  <span className=\"text-neon-cyan text-sm font-medium\">\n                    Портфолио\n                  </span>\n                </div>\n              </div>\n              \n              <h3 className=\"text-2xl font-medium mb-3\">{project.title}</h3>\n              <p className=\"text-gray-400 mb-4\">{project.description}</p>\n              \n              <div className=\"flex flex-wrap gap-2 mb-6\">\n                {project.technologies.map((tech) => (\n                  <span\n                    key={tech}\n                    className=\"px-3 py-1 bg-neon-cyan/10 text-neon-cyan rounded-full text-sm\"\n                  >\n                    {tech}\n                  </span>\n                ))}\n              </div>\n              \n              <motion.div\n                whileHover={{ x: 10 }}\n                className=\"flex items-center text-neon-cyan transition-transform\"\n              >\n                <span className=\"mr-2\">Посмотреть проект</span>\n                <ExternalLink className=\"w-4 h-4\" />\n              </motion.div>\n            </motion.div>\n            ))}\n          </motion.div>\n        )}\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8, delay: 0.8 }}\n          className=\"text-center mt-16\"\n        >\n          <motion.button\n            whileHover={{ scale: 1.05, y: -2 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"glass-morphism px-8 py-4 rounded-full hover:bg-neon-cyan/10 transition-all duration-300 group\"\n          >\n            <span className=\"group-hover:text-neon-cyan transition-colors\">\n              Посмотреть все проекты\n            </span>\n          </motion.button>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5151},"client/src/components/process-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Search, PenTool, Code, Rocket } from 'lucide-react';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\n\nconst processSteps = [\n  {\n    number: '01',\n    title: 'Анализ и Планирование',\n    description: 'Глубокое изучение требований, создание технического задания и архитектуры проекта',\n    icon: Search,\n    side: 'left',\n  },\n  {\n    number: '02',\n    title: 'Дизайн и Прототипирование',\n    description: 'Создание UX/UI дизайна, интерактивных прототипов и 3D концепций',\n    icon: PenTool,\n    side: 'right',\n  },\n  {\n    number: '03',\n    title: 'Разработка',\n    description: 'Программирование функционала, интеграция 3D элементов и создание API',\n    icon: Code,\n    side: 'left',\n  },\n  {\n    number: '04',\n    title: 'Тестирование и Запуск',\n    description: 'Комплексное тестирование, оптимизация производительности и развертывание',\n    icon: Rocket,\n    side: 'right',\n  },\n];\n\nexport function ProcessSection() {\n  const { elementRef, hasTriggered } = useScrollTrigger();\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 50, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.8,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"process\" className=\"py-16 md:py-24 lg:py-32 relative bg-dark-gray\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-light mb-6 text-3d\">\n            Процесс <span className=\"text-neon-cyan\">Разработки</span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-400 max-w-2xl mx-auto\">\n            Структурированный подход к созданию инновационных решений\n          </p>\n        </motion.div>\n\n        <div className=\"relative\">\n          {/* Central Timeline - Hidden on mobile */}\n          <div className=\"hidden lg:block absolute left-1/2 transform -translate-x-1/2 h-full w-1 bg-gradient-to-b from-neon-cyan via-neon-cyan/50 to-transparent\"></div>\n\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={hasTriggered ? \"visible\" : \"hidden\"}\n            className=\"space-y-12 lg:space-y-24\"\n          >\n            {processSteps.map((step, index) => (\n              <motion.div\n                key={step.number}\n                variants={itemVariants}\n                className=\"flex flex-col lg:flex-row items-center lg:items-center\"\n              >\n                {/* Mobile Layout - Single Column */}\n                <div className=\"lg:hidden w-full\">\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    className=\"glass-morphism p-6 rounded-3xl floating-card\"\n                  >\n                    <div className=\"flex items-start space-x-4 mb-4\">\n                      <motion.div\n                        whileHover={{ scale: 1.05 }}\n                        transition={{ duration: 0.3 }}\n                        className=\"w-12 h-12 bg-neon-cyan rounded-full flex items-center justify-center flex-shrink-0 animate-glow\"\n                        style={{ boxShadow: '0 0 20px hsla(180, 100%, 50%, 0.3)' }}\n                      >\n                        <step.icon className=\"w-5 h-5 text-deep-black\" />\n                      </motion.div>\n                      <div>\n                        <h3 className=\"text-xl font-medium mb-2 text-neon-cyan\">\n                          {step.number}. {step.title}\n                        </h3>\n                        <p className=\"text-gray-300 text-sm leading-relaxed\">{step.description}</p>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Desktop Layout - Timeline */}\n                <div className=\"hidden lg:flex w-full items-center\">\n                  {step.side === 'left' ? (\n                    <>\n                      <div className=\"w-1/2 pr-12 text-right\">\n                        <motion.div\n                          whileHover={{ scale: 1.02 }}\n                          className=\"glass-morphism p-8 rounded-3xl floating-card\"\n                        >\n                          <h3 className=\"text-2xl font-medium mb-4 text-neon-cyan\">\n                            {step.number}. {step.title}\n                          </h3>\n                          <p className=\"text-gray-300\">{step.description}</p>\n                        </motion.div>\n                      </div>\n                      <div className=\"absolute left-1/2 transform -translate-x-1/2\">\n                        <motion.div\n                          whileHover={{ scale: 1.1 }}\n                          transition={{ duration: 0.3 }}\n                          className=\"w-16 h-16 bg-neon-cyan rounded-full flex items-center justify-center animate-glow\"\n                          style={{ boxShadow: '0 0 20px hsla(180, 100%, 50%, 0.3)' }}\n                        >\n                          <step.icon className=\"w-6 h-6 text-deep-black\" />\n                        </motion.div>\n                      </div>\n                      <div className=\"w-1/2 pl-12\"></div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-1/2 pr-12\"></div>\n                      <div className=\"absolute left-1/2 transform -translate-x-1/2\">\n                        <motion.div\n                          whileHover={{ scale: 1.1 }}\n                          transition={{ duration: 0.3 }}\n                          className=\"w-16 h-16 bg-neon-cyan rounded-full flex items-center justify-center animate-glow\"\n                          style={{ boxShadow: '0 0 20px hsla(180, 100%, 50%, 0.3)' }}\n                        >\n                          <step.icon className=\"w-6 h-6 text-deep-black\" />\n                        </motion.div>\n                      </div>\n                      <div className=\"w-1/2 pl-12\">\n                        <motion.div\n                          whileHover={{ scale: 1.02 }}\n                          className=\"glass-morphism p-8 rounded-3xl floating-card\"\n                        >\n                          <h3 className=\"text-2xl font-medium mb-4 text-neon-cyan\">\n                            {step.number}. {step.title}\n                          </h3>\n                          <p className=\"text-gray-300\">{step.description}</p>\n                        </motion.div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7432},"client/src/components/services-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Box, Smartphone, Brain, Cloud, Shield, Rocket } from 'lucide-react';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\nimport { Link } from 'wouter';\n\nconst services = [\n  {\n    icon: Box,\n    title: 'Веб-Разработка',\n    description: 'Создание современных веб-приложений от лендингов до сложных корпоративных систем',\n    technologies: ['React', 'Vue.js', 'Next.js'],\n    link: '/services/web-development',\n  },\n  {\n    icon: Brain,\n    title: '3D и WebGL',\n    description: 'Интерактивные 3D веб-приложения, игры и визуализации с использованием передовых технологий',\n    technologies: ['Three.js', 'WebGL', 'Babylon.js'],\n    link: '/services/3d-webgl',\n  },\n  {\n    icon: Smartphone,\n    title: 'Мобильная Разработка',\n    description: 'Нативные и кроссплатформенные мобильные приложения с современным UX',\n    technologies: ['React Native', 'Flutter', 'iOS/Android'],\n    link: '/services/mobile-development',\n  },\n  {\n    icon: Cloud,\n    title: 'Backend & API',\n    description: 'Надежные серверные решения, микросервисы и RESTful API',\n    technologies: ['Node.js', 'Python', 'PostgreSQL'],\n    link: '/services/backend-api',\n  },\n  {\n    icon: Shield,\n    title: 'ИИ и ML',\n    description: 'Внедрение машинного обучения и искусственного интеллекта в бизнес-процессы',\n    technologies: ['TensorFlow', 'OpenAI', 'Computer Vision'],\n    link: '/services/ai-ml',\n  },\n  {\n    icon: Rocket,\n    title: 'DevOps & Cloud',\n    description: 'Автоматизация развертывания, мониторинг и масштабирование в облаке',\n    technologies: ['AWS', 'Docker', 'CI/CD'],\n    link: '/services/devops-cloud',\n  },\n];\n\nexport function ServicesSection() {\n  const { elementRef, hasTriggered } = useScrollTrigger();\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 50, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.6,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"services\" className=\"py-16 md:py-24 lg:py-32 relative\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-light mb-6 text-3d\">\n            Наши <span className=\"text-neon-cyan\">Услуги</span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-400 max-w-2xl mx-auto\">\n            Полный спектр разработки от концепции до запуска\n          </p>\n        </motion.div>\n\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={hasTriggered ? \"visible\" : \"hidden\"}\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n        >\n          {services.map((service, index) => (\n            <motion.div\n              key={service.title}\n              variants={itemVariants}\n              whileHover={{ \n                scale: 1.02,\n                y: -5,\n              }}\n              transition={{ duration: 0.3 }}\n              className=\"glass-morphism p-6 lg:p-8 rounded-3xl group cursor-pointer hover:shadow-lg hover:shadow-neon-cyan/10\"\n            >\n              <motion.div\n                whileHover={{ scale: 1.1 }}\n                transition={{ duration: 0.3 }}\n                className=\"w-20 h-20 bg-neon-cyan/10 rounded-2xl flex items-center justify-center mb-6 group-hover:bg-neon-cyan/20 transition-colors duration-300\"\n              >\n                <service.icon className=\"w-8 h-8 text-neon-cyan\" />\n              </motion.div>\n              \n              <h3 className=\"text-2xl font-medium mb-4\">{service.title}</h3>\n              <p className=\"text-gray-400 mb-6\">{service.description}</p>\n              \n              <div className=\"flex flex-wrap gap-2 mb-6\">\n                {service.technologies.map((tech) => (\n                  <span\n                    key={tech}\n                    className=\"px-3 py-1 bg-neon-cyan/10 text-neon-cyan rounded-full text-sm\"\n                  >\n                    {tech}\n                  </span>\n                ))}\n              </div>\n              \n              <Link href={service.link}>\n                <motion.div\n                  whileHover={{ x: 10 }}\n                  className=\"flex items-center text-neon-cyan transition-transform cursor-pointer\"\n                >\n                  <span className=\"mr-2\">Подробнее</span>\n                  <motion.span\n                    animate={{ x: [0, 5, 0] }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  >\n                    →\n                  </motion.span>\n                </motion.div>\n              </Link>\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5589},"client/src/components/team-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Code2, Palette, Server, Shield, Brain, Users, Target, Lightbulb, Monitor, Smartphone, Settings } from 'lucide-react';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\nimport { useQuery } from '@tanstack/react-query';\nimport type { TeamRole } from '@shared/schema';\n\nexport function TeamSection() {\n  const { elementRef, hasTriggered } = useScrollTrigger();\n\n  // Загружаем данные команды из базы данных\n  const { data: teamStructure = [], isLoading } = useQuery<TeamRole[]>({\n    queryKey: ['/api/team-roles'],\n  });\n\n  // Карта иконок для рендеринга\n  const iconMap: Record<string, any> = {\n    Monitor, Code2, Palette, Server, Shield, Brain, Users, Target, Lightbulb, Smartphone, Settings\n  };\n\n  // Карта градиентов для цветов\n  const colorGradients: Record<string, string> = {\n    blue: \"from-blue-500/20 to-cyan-500/20\",\n    green: \"from-green-500/20 to-emerald-500/20\", \n    purple: \"from-purple-500/20 to-pink-500/20\",\n    orange: \"from-orange-500/20 to-red-500/20\",\n    red: \"from-red-500/20 to-pink-500/20\",\n    yellow: \"from-yellow-500/20 to-orange-500/20\",\n    pink: \"from-pink-500/20 to-purple-500/20\",\n    gray: \"from-gray-500/20 to-slate-500/20\"\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.3,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 30, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.6,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"team\" className=\"py-16 md:py-24 lg:py-32 relative\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-light mb-6 text-3d\">\n            Структура <span className=\"text-neon-cyan\">Команды</span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-400 max-w-3xl mx-auto\">\n            Сплоченная команда профессионалов с четким распределением ролей и ответственности\n          </p>\n        </motion.div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan\"></div>\n            <p className=\"mt-4 text-gray-400\">Загружаем данные команды...</p>\n          </div>\n        ) : (\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={hasTriggered ? \"visible\" : \"hidden\"}\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8\"\n          >\n            {teamStructure.map((role, index) => {\n              const IconComponent = iconMap[role.icon] || Users;\n              return (\n              <motion.div\n                key={role.title}\n                variants={itemVariants}\n                whileHover={{ \n                  scale: 1.02,\n                  y: -5,\n                }}\n                transition={{ duration: 0.3 }}\n                className=\"glass-morphism rounded-3xl p-6 lg:p-8 text-center group hover:shadow-lg hover:shadow-neon-cyan/10 relative overflow-hidden\"\n              >\n                {/* Background gradient */}\n                <div className={`absolute inset-0 bg-gradient-to-br ${colorGradients[role.color] || colorGradients.blue} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />\n                \n                {/* Content */}\n                <div className=\"relative z-10\">\n                  {/* Count badge */}\n                  <div className=\"absolute top-0 right-0 w-8 h-8 bg-neon-cyan rounded-full flex items-center justify-center text-deep-black font-semibold text-sm\">\n                    {role.count}\n                  </div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.1, rotateY: 180 }}\n                    transition={{ duration: 0.6 }}\n                    className=\"w-16 h-16 mx-auto mb-6 bg-neon-cyan/10 rounded-2xl flex items-center justify-center group-hover:bg-neon-cyan/20 transition-colors duration-300\"\n                  >\n                    <IconComponent className=\"w-8 h-8 text-neon-cyan\" />\n                  </motion.div>\n                  \n                  <h3 className=\"text-lg font-semibold mb-3 text-white group-hover:text-neon-cyan transition-colors duration-300\">\n                    {role.title}\n                  </h3>\n                  <p className=\"text-gray-400 text-sm mb-4 leading-relaxed\">\n                    {role.description}\n                  </p>\n                </div>\n              </motion.div>\n            );\n            })}\n          </motion.div>\n        )}\n\n        {/* Team philosophy */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8, delay: 0.5 }}\n          className=\"text-center mt-16\"\n        >\n          <div className=\"glass-morphism rounded-3xl p-8 lg:p-12 max-w-5xl mx-auto\">\n            <h3 className=\"text-2xl lg:text-3xl font-light mb-6 text-3d\">\n              Наша <span className=\"text-neon-cyan\">философия работы</span>\n            </h3>\n            <p className=\"text-gray-300 text-lg leading-relaxed mb-8\">\n              Мы верим в силу командной работы и четкого распределения ролей. Каждый участник команды \n              является экспертом в своей области и вносит уникальный вклад в успех проекта. \n              Прозрачная коммуникация и взаимная поддержка - основа нашего подхода.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-neon-cyan/10 rounded-2xl flex items-center justify-center\">\n                  <Users className=\"w-8 h-8 text-neon-cyan\" />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2 text-neon-cyan\">Командная работа</h4>\n                <p className=\"text-gray-400 text-sm\">Синергия экспертов разных областей</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-neon-cyan/10 rounded-2xl flex items-center justify-center\">\n                  <Target className=\"w-8 h-8 text-neon-cyan\" />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2 text-neon-cyan\">Фокус на качестве</h4>\n                <p className=\"text-gray-400 text-sm\">Каждый элемент проходит строгий контроль</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-neon-cyan/10 rounded-2xl flex items-center justify-center\">\n                  <Lightbulb className=\"w-8 h-8 text-neon-cyan\" />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2 text-neon-cyan\">Инновации</h4>\n                <p className=\"text-gray-400 text-sm\">Постоянно изучаем новые технологии</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":7952},"client/src/components/technologies-section.tsx":{"content":"import { motion } from 'framer-motion';\nimport { useScrollTrigger } from '@/hooks/use-scroll-trigger';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Technology } from '@shared/schema';\nimport * as LucideIcons from 'lucide-react';\n\nexport function TechnologiesSection() {\n  const { elementRef, hasTriggered } = useScrollTrigger();\n\n  // Загружаем данные технологий из базы данных\n  const { data: technologies = [], isLoading } = useQuery<Technology[]>({\n    queryKey: ['/api/technologies'],\n  });\n\n  // Цветовые градиенты для разных категорий\n  const categoryColors: Record<string, string> = {\n    frontend: 'from-blue-400 to-cyan-400',\n    backend: 'from-green-400 to-emerald-400',\n    mobile: 'from-purple-400 to-pink-400',\n    database: 'from-orange-400 to-yellow-400',\n    devops: 'from-red-400 to-pink-400',\n    design: 'from-pink-400 to-purple-400'\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.05,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { scale: 0, opacity: 0 },\n    visible: {\n      scale: 1,\n      opacity: 1,\n      transition: {\n        duration: 0.5,\n        ease: 'easeOut',\n      },\n    },\n  };\n\n  return (\n    <section ref={elementRef} id=\"technologies\" className=\"py-32 relative\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={hasTriggered ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-20\"\n        >\n          <h2 className=\"text-5xl font-light mb-6 text-3d\">\n            Наши <span className=\"text-neon-cyan\">Технологии</span>\n          </h2>\n          <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n            Передовой стек технологий для создания инновационных решений\n          </p>\n        </motion.div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan\"></div>\n            <p className=\"mt-4 text-gray-400\">Загружаем технологии...</p>\n          </div>\n        ) : (\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={hasTriggered ? \"visible\" : \"hidden\"}\n            className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-8\"\n          >\n            {technologies.map((tech, index) => {\n              const IconComponent = (LucideIcons as any)[tech.icon] || LucideIcons.Code;\n              return (\n                <motion.div\n                  key={tech.id}\n                  variants={itemVariants}\n                  whileHover={{ \n                    scale: 1.05,\n                    y: -5,\n                  }}\n                  transition={{ duration: 0.3 }}\n                  className=\"glass-morphism p-6 rounded-2xl group text-center cursor-pointer hover:shadow-lg hover:shadow-neon-cyan/10\"\n                >\n                  <motion.div\n                    whileHover={{ scale: 1.1 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"w-16 h-16 mx-auto mb-4 bg-neon-cyan/10 rounded-xl flex items-center justify-center group-hover:bg-neon-cyan/20 transition-colors duration-300\"\n                  >\n                    <IconComponent className=\"w-8 h-8 text-neon-cyan\" />\n                  </motion.div>\n                  <h4 className=\"font-medium text-sm group-hover:text-neon-cyan transition-colors\">\n                    {tech.name}\n                  </h4>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3921},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-mouse-position.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport function useMousePosition() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent) => {\n      setMousePosition({\n        x: (e.clientX / window.innerWidth) * 2 - 1,\n        y: -(e.clientY / window.innerHeight) * 2 + 1\n      });\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, []);\n\n  return mousePosition;\n}\n","size_bytes":570},"client/src/hooks/use-scroll-trigger.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface UseScrollTriggerOptions {\n  threshold?: number;\n  rootMargin?: string;\n}\n\nexport function useScrollTrigger(options: UseScrollTriggerOptions = {}) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const [hasTriggered, setHasTriggered] = useState(false);\n  const elementRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n        if (entry.isIntersecting && !hasTriggered) {\n          setHasTriggered(true);\n        }\n      },\n      {\n        threshold: options.threshold || 0.1,\n        rootMargin: options.rootMargin || '0px 0px -100px 0px'\n      }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [hasTriggered, options.threshold, options.rootMargin]);\n\n  return { elementRef, isIntersecting, hasTriggered };\n}\n","size_bytes":1036},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { Navigation } from '@/components/navigation';\nimport { HeroSection } from '@/components/hero-section';\nimport { ServicesSection } from '@/components/services-section';\nimport { PortfolioSection } from '@/components/portfolio-section';\nimport { TeamSection } from '@/components/team-section';\nimport { ProcessSection } from '@/components/process-section';\nimport { TechnologiesSection } from '@/components/technologies-section';\nimport { ContactSection } from '@/components/contact-section';\nimport { Footer } from '@/components/footer';\n\nexport default function Home() {\n  return (\n    <div className=\"bg-deep-black text-white overflow-x-hidden\">\n      <Navigation />\n      <HeroSection />\n      <ServicesSection />\n      <PortfolioSection />\n      <TeamSection />\n      <ProcessSection />\n      <TechnologiesSection />\n      <ContactSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":888},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/three/floating-geometry.tsx":{"content":"import { motion } from 'framer-motion';\nimport { useMousePosition } from '@/hooks/use-mouse-position';\n\ninterface FloatingGeometryProps {\n  position: { x: string; y: string };\n  geometry: 'box' | 'sphere' | 'torus' | 'octahedron';\n  scale?: number;\n  delay?: number;\n}\n\nexport function FloatingGeometry({ position, geometry, scale = 1, delay = 0 }: FloatingGeometryProps) {\n  const mousePosition = useMousePosition();\n\n  const getGeometryShape = () => {\n    switch (geometry) {\n      case 'box':\n        return 'rounded-lg';\n      case 'sphere':\n        return 'rounded-full';\n      case 'torus':\n        return 'rounded-full border-4 border-neon-cyan/30 hidden'; // Hide torus rings\n      case 'octahedron':\n        return 'rounded-lg rotate-45';\n      default:\n        return 'rounded-lg';\n    }\n  };\n\n  const getSize = () => {\n    const baseSize = 60 * scale;\n    return {\n      width: baseSize,\n      height: baseSize,\n    };\n  };\n\n  return (\n    <motion.div\n      className={`absolute bg-neon-cyan/10 border border-neon-cyan/30 ${getGeometryShape()}`}\n      style={{\n        left: position.x,\n        top: position.y,\n        ...getSize(),\n      }}\n      animate={{\n        y: [0, -20, 0],\n        rotateX: [0, 360],\n        rotateY: [0, 180, 360],\n        scale: [scale, scale * 1.1, scale],\n      }}\n      transition={{\n        duration: 8,\n        repeat: Infinity,\n        ease: 'easeInOut',\n        delay,\n      }}\n      whileHover={{\n        scale: scale * 1.2,\n        rotateZ: 45,\n        boxShadow: '0 0 30px rgba(0, 255, 255, 0.5)',\n      }}\n    />\n  );\n}\n","size_bytes":1571},"client/src/components/three/hero-scene.tsx":{"content":"import { ParticleSystem } from './particle-system';\nimport { FloatingGeometry } from './floating-geometry';\n\nexport function HeroScene() {\n  return (\n    <div className=\"absolute inset-0 z-0 overflow-hidden\">\n      <ParticleSystem count={100} />\n      \n      {/* Floating geometric shapes */}\n      {/* Removed octahedron that might appear as white ring */}\n      {/* Removed torus geometry - white rings */}\n      {/* Removed sphere that might appear as white ring */}\n      <FloatingGeometry \n        position={{ x: '20%', y: '75%' }} \n        geometry=\"box\" \n        scale={0.5} \n        delay={3} \n      />\n      {/* Removed octahedron that might appear as white ring */}\n      \n      {/* Additional background elements */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-neon-cyan/5 via-transparent to-neon-cyan/5 animate-pulse\" />\n      \n      {/* Removed glowing orbs that might look like rings */}\n    </div>\n  );\n}\n","size_bytes":938},"client/src/components/three/particle-system.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface ParticleSystemProps {\n  count?: number;\n  className?: string;\n}\n\nexport function ParticleSystem({ count = 50, className = '' }: ParticleSystemProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const particles: HTMLDivElement[] = [];\n    \n    // Create particles\n    for (let i = 0; i < count; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'absolute w-1 h-1 bg-neon-cyan rounded-full opacity-60';\n      particle.style.left = `${Math.random() * 100}%`;\n      particle.style.top = `${Math.random() * 100}%`;\n      particle.style.animationDelay = `${Math.random() * 4}s`;\n      particle.style.animationDuration = `${3 + Math.random() * 2}s`;\n      particle.classList.add('animate-particle-float');\n      \n      containerRef.current.appendChild(particle);\n      particles.push(particle);\n    }\n\n    return () => {\n      particles.forEach(particle => particle.remove());\n    };\n  }, [count]);\n\n  return (\n    <div \n      ref={containerRef} \n      className={`absolute inset-0 overflow-hidden pointer-events-none ${className}`}\n    />\n  );\n}\n","size_bytes":1207},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-gray-700 bg-deep-black/50 px-3 py-2 text-base text-black ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-black placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neon-cyan focus-visible:ring-offset-0 focus-visible:border-neon-cyan disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":831},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-gray-700 bg-deep-black/50 px-3 py-2 text-sm text-white ring-offset-background data-[placeholder]:text-gray-400 focus:outline-none focus:ring-2 focus:ring-neon-cyan focus:ring-offset-0 focus:border-neon-cyan disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 text-neon-cyan\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border border-gray-700 bg-deep-black text-white shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-white outline-none hover:bg-neon-cyan/20 hover:text-neon-cyan focus:bg-neon-cyan/10 focus:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-all duration-200\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-neon-cyan\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5880},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-gray-700 bg-deep-black/50 px-3 py-2 text-base text-black ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neon-cyan focus-visible:ring-offset-0 focus-visible:border-neon-cyan disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":734},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { technologies, teamRoles, portfolioProjects, serviceProjects } from \"@shared/schema\";\n\nexport async function seedDatabase() {\n  try {\n\n    // Добавляем базовые роли команды\n    const baseRoles = [\n      { \n        title: \"Frontend Разработчики\", \n        description: \"Создают пользовательские интерфейсы и обеспечивают отличный UX\", \n        icon: \"Monitor\", \n        count: 5, \n        color: \"blue\" \n      },\n      { \n        title: \"Backend Разработчики\", \n        description: \"Разрабатывают серверную логику и API\", \n        icon: \"Server\", \n        count: 4, \n        color: \"green\" \n      },\n      { \n        title: \"UI/UX Дизайнеры\", \n        description: \"Создают красивые и удобные интерфейсы\", \n        icon: \"Palette\", \n        count: 3, \n        color: \"purple\" \n      },\n      { \n        title: \"DevOps Инженеры\", \n        description: \"Настройка и поддержка инфраструктуры\", \n        icon: \"Settings\", \n        count: 2, \n        color: \"orange\" \n      },\n      { \n        title: \"Мобильные Разработчики\", \n        description: \"Создают нативные и кроссплатформенные приложения\", \n        icon: \"Smartphone\", \n        count: 3, \n        color: \"red\" \n      },\n      { \n        title: \"Проект-менеджеры\", \n        description: \"Управление проектами и координация команды\", \n        icon: \"Users\", \n        count: 2, \n        color: \"yellow\" \n      }\n    ];\n\n    await db.insert(teamRoles).values(baseRoles);\n\n    // Добавляем примеры проектов портфолио\n    const portfolioSamples = [\n      {\n        title: \"E-commerce Platform\",\n        description: \"Современная платформа электронной коммерции с административной панелью\",\n        image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop\",\n        technologies: [\"React\", \"Node.js\", \"PostgreSQL\", \"Stripe API\"],\n        link: \"#\",\n        featured: true\n      },\n      {\n        title: \"Corporate Website\",\n        description: \"Корпоративный сайт с CMS и аналитикой\",\n        image: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop\",\n        technologies: [\"Vue.js\", \"Express.js\", \"MongoDB\"],\n        link: \"#\",\n        featured: true\n      },\n      {\n        title: \"Mobile Banking App\",\n        description: \"Мобильное приложение для банковских операций\",\n        image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop\",\n        technologies: [\"React Native\", \"Node.js\", \"PostgreSQL\"],\n        link: \"#\",\n        featured: false\n      }\n    ];\n\n    await db.insert(portfolioProjects).values(portfolioSamples);\n\n    // Добавляем примеры проектов для услуг\n    const serviceSamples = [\n      {\n        serviceType: \"web-development\",\n        title: \"Интернет-магазин электроники\",\n        description: \"Полнофункциональный интернет-магазин с корзиной и оплатой\",\n        image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop\",\n        technologies: [\"React\", \"Node.js\", \"PostgreSQL\", \"Stripe\"],\n        link: \"#\"\n      },\n      {\n        serviceType: \"web-development\", \n        title: \"SaaS платформа\",\n        description: \"B2B платформа для управления проектами\",\n        image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop\",\n        technologies: [\"Vue.js\", \"Express.js\", \"MongoDB\"],\n        link: \"#\"\n      },\n      {\n        serviceType: \"mobile-development\",\n        title: \"Фитнес приложение\",\n        description: \"Мобильное приложение для отслеживания тренировок\",\n        image: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop\",\n        technologies: [\"Flutter\", \"Firebase\", \"Stripe\"],\n        link: \"#\"\n      },\n      {\n        serviceType: \"mobile-development\",\n        title: \"Доставка еды\",\n        description: \"Приложение для заказа и доставки еды\",\n        image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=600&h=400&fit=crop\",\n        technologies: [\"React Native\", \"Node.js\", \"MongoDB\"],\n        link: \"#\"\n      }\n    ];\n\n    await db.insert(serviceProjects).values(serviceSamples);\n\n    // Добавляем уникальные технологии как было изначально\n    const technologiesData = [\n      { name: 'React', icon: 'Code2', category: 'frontend' },\n      { name: 'Vue.js', icon: 'Code2', category: 'frontend' },\n      { name: 'Next.js', icon: 'Code2', category: 'frontend' },\n      { name: 'TypeScript', icon: 'FileCode', category: 'frontend' },\n      { name: 'Node.js', icon: 'Server', category: 'backend' },\n      { name: 'Python', icon: 'Code2', category: 'backend' },\n      { name: 'Three.js', icon: 'Box', category: 'frontend' },\n      { name: 'WebGL', icon: 'Monitor', category: 'frontend' },\n      { name: 'PostgreSQL', icon: 'Database', category: 'database' },\n      { name: 'MongoDB', icon: 'Database', category: 'database' },\n      { name: 'AWS', icon: 'Cloud', category: 'devops' },\n      { name: 'Docker', icon: 'Container', category: 'devops' },\n      { name: 'Kubernetes', icon: 'Settings', category: 'devops' },\n      { name: 'Redis', icon: 'Database', category: 'database' },\n      { name: 'GraphQL', icon: 'Code2', category: 'backend' },\n      { name: 'TensorFlow', icon: 'Brain', category: 'ai' },\n      { name: 'Flutter', icon: 'Smartphone', category: 'mobile' },\n      { name: 'Swift', icon: 'Smartphone', category: 'mobile' },\n      { name: 'Kotlin', icon: 'Smartphone', category: 'mobile' },\n      { name: 'Rust', icon: 'Code2', category: 'backend' },\n      { name: 'Go', icon: 'Code2', category: 'backend' },\n      { name: 'Figma', icon: 'Palette', category: 'design' },\n      { name: 'Blender', icon: 'Box', category: 'design' },\n      { name: 'Unity', icon: 'Gamepad2', category: 'design' }\n    ];\n\n    await db.insert(technologies).values(technologiesData);\n\n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}","size_bytes":6741},"client/src/pages/admin-login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lock, Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst ADMIN_PASSWORD = 'vertex2024';\n\nexport function AdminLoginPage() {\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (password === ADMIN_PASSWORD) {\n      sessionStorage.setItem('admin_authenticated', 'true');\n      setLocation('/admin');\n      toast({\n        title: \"Успешный вход\",\n        description: \"Добро пожаловать в админ-панель!\",\n      });\n    } else {\n      toast({\n        title: \"Неверный пароль\",\n        description: \"Проверьте правильность введенного пароля\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-gray-900 to-slate-800 flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-2xl backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"relative\">\n              <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-cyan-400 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                <Lock className=\"w-10 h-10 text-white\" />\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-green-400 rounded-full border-2 border-slate-800 animate-pulse\"></div>\n            </div>\n            <CardTitle className=\"text-3xl text-white font-bold mb-3\">\n              Вход в админ-панель\n            </CardTitle>\n            <p className=\"text-slate-300 text-lg\">\n              Введите пароль для доступа к панели управления\n            </p>\n          </CardHeader>\n          <CardContent className=\"px-8 pb-8\">\n            <form onSubmit={handleLogin} className=\"space-y-8\">\n              <div className=\"relative\">\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Введите пароль\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"bg-slate-900/50 border-slate-600/50 text-white pr-12 h-12 text-lg placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20 transition-all duration-200\"\n                  autoFocus\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 h-8 w-8 p-0 hover:bg-slate-700/50 transition-colors\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"w-5 h-5 text-slate-400 hover:text-white transition-colors\" />\n                  ) : (\n                    <Eye className=\"w-5 h-5 text-slate-400 hover:text-white transition-colors\" />\n                  )}\n                </Button>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-bold h-12 text-lg shadow-lg hover:shadow-xl transition-all duration-200 rounded-xl\"\n              >\n                Войти в систему\n              </Button>\n            </form>\n            <div className=\"mt-8 p-6 bg-slate-800/50 rounded-xl border border-slate-700/50\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <div className=\"w-3 h-3 bg-cyan-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-cyan-300 font-semibold\">Демонстрационный доступ</span>\n              </div>\n              <p className=\"text-slate-300 text-sm\">\n                Пароль: <span className=\"text-cyan-400 font-mono font-semibold bg-slate-900/50 px-2 py-1 rounded\">vertex2024</span>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4648},"client/src/pages/admin-old.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, Users, Briefcase, Code, Mail, LogOut } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { \n  Contact, \n  PortfolioProject, \n  TeamRole, \n  Technology \n} from '@shared/schema';\n\n// Import dialog components\nimport { PortfolioProjectDialog } from '@/components/admin/portfolio-project-dialog';\nimport { TeamRoleDialog } from '@/components/admin/team-role-dialog';\nimport { TechnologyDialog } from '@/components/admin/technology-dialog';\nimport { ContactsTable } from '@/components/admin/contacts-table';\n\nexport function AdminPage() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Проверка аутентификации\n  useEffect(() => {\n    const isAuthenticated = sessionStorage.getItem('admin_authenticated');\n    if (!isAuthenticated) {\n      setLocation('/admin/login');\n    }\n  }, [setLocation]);\n  \n  // Загрузка данных\n  const { data: contacts = [] } = useQuery<Contact[]>({ queryKey: ['/api/contacts'] });\n  const { data: portfolioProjects = [] } = useQuery<PortfolioProject[]>({ queryKey: ['/api/portfolio-projects'] });\n  const { data: teamRoles = [] } = useQuery<TeamRole[]>({ queryKey: ['/api/team-roles'] });\n  const { data: technologies = [] } = useQuery<Technology[]>({ queryKey: ['/api/technologies'] });\n\n  // Выход из админки\n  const handleLogout = () => {\n    sessionStorage.removeItem('admin_authenticated');\n    setLocation('/');\n    toast({\n      title: \"Выход выполнен\",\n      description: \"Вы вышли из админ-панели\",\n    });\n  };\n\n  // Мутации для удаления\n  const deletePortfolioProject = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/portfolio-projects/${id}`, 'DELETE'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio-projects'] });\n      toast({\n        title: \"Проект удален\",\n        description: \"Проект портфолио успешно удален\",\n      });\n    },\n  });\n\n  const deleteTeamRole = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/team-roles/${id}`, 'DELETE'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-roles'] });\n      toast({\n        title: \"Роль удалена\",\n        description: \"Роль команды успешно удалена\",\n      });\n    },\n  });\n\n  const deleteTechnology = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/technologies/${id}`, 'DELETE'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technologies'] });\n      toast({\n        title: \"Технология удалена\",\n        description: \"Технология успешно удалена\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-deep-black text-white p-6\">\n      <div className=\"container mx-auto max-w-7xl\">\n        <div className=\"mb-8 flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-4xl font-light mb-4 text-3d\">\n              Панель <span className=\"text-neon-cyan\">Администратора</span>\n            </h1>\n            <p className=\"text-gray-400\">Управление содержимым сайта VERTEX Studio</p>\n          </div>\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Выйти\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"contacts\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-gray-800/50 backdrop-blur-sm border border-gray-700\">\n            <TabsTrigger \n              value=\"contacts\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-neon-cyan data-[state=active]:text-black\"\n            >\n              <Mail className=\"w-4 h-4\" />\n              Заявки ({contacts.length})\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"portfolio\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-neon-cyan data-[state=active]:text-black\"\n            >\n              <Briefcase className=\"w-4 h-4\" />\n              Портфолио ({portfolioProjects.length})\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"team\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-neon-cyan data-[state=active]:text-black\"\n            >\n              <Users className=\"w-4 h-4\" />\n              Команда ({teamRoles.length})\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"technologies\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-neon-cyan data-[state=active]:text-black\"\n            >\n              <Code className=\"w-4 h-4\" />\n              Технологии ({technologies.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"contacts\" className=\"space-y-4\">\n            <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5 text-neon-cyan\" />\n                  Заявки от клиентов\n                </CardTitle>\n                <p className=\"text-gray-400\">Управление обращениями и заявками клиентов</p>\n              </CardHeader>\n              <CardContent>\n                <ContactsTable contacts={contacts} />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"portfolio\" className=\"space-y-4\">\n            <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Briefcase className=\"w-5 h-5 text-neon-cyan\" />\n                    Проекты портфолио\n                  </CardTitle>\n                  <p className=\"text-gray-400 mt-1\">Управление проектами в портфолио компании</p>\n                </div>\n                <PortfolioProjectDialog>\n                  <Button className=\"bg-neon-cyan hover:bg-neon-cyan/80 text-black font-semibold\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Добавить проект\n                  </Button>\n                </PortfolioProjectDialog>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {portfolioProjects.map((project) => (\n                    <div key={project.id} className=\"bg-gray-900 p-4 rounded-lg border border-gray-600\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-semibold text-white\">{project.title}</h3>\n                        <div className=\"flex gap-2\">\n                          {project.featured && <Badge variant=\"secondary\">Рекомендуемый</Badge>}\n                          <PortfolioProjectDialog project={project}>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </PortfolioProjectDialog>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => deletePortfolioProject.mutate(project.id)}\n                            disabled={deletePortfolioProject.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-400\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-400 text-sm mb-2\">{project.description}</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {project.technologies?.map((tech) => (\n                          <Badge key={tech} variant=\"outline\" className=\"text-xs\">\n                            {tech}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n\n\n          <TabsContent value=\"team\" className=\"space-y-4\">\n            <Card className=\"bg-gray-800/50 backdrop-blur-sm border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Users className=\"w-5 h-5 text-neon-cyan\" />\n                    Роли команды\n                  </CardTitle>\n                  <p className=\"text-gray-400 mt-1\">Управление ролями и структурой команды</p>\n                </div>\n                <TeamRoleDialog>\n                  <Button className=\"bg-neon-cyan hover:bg-neon-cyan/80 text-black font-semibold\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Добавить роль\n                  </Button>\n                </TeamRoleDialog>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {teamRoles.map((role) => (\n                    <div key={role.id} className=\"bg-gray-900 p-4 rounded-lg border border-gray-600\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-semibold text-white\">{role.title}</h3>\n                        <div className=\"flex gap-2\">\n                          <Badge variant=\"secondary\">{role.count}</Badge>\n                          <TeamRoleDialog role={role}>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </TeamRoleDialog>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => deleteTeamRole.mutate(role.id)}\n                            disabled={deleteTeamRole.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-400\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-400 text-sm\">{role.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"technologies\">\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Code className=\"w-5 h-5\" />\n                  Технологии ({technologies.length})\n                </CardTitle>\n                <TechnologyDialog>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Добавить технологию\n                  </Button>\n                </TechnologyDialog>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {technologies.map((tech) => (\n                    <div key={tech.id} className=\"bg-gray-900 p-3 rounded-lg border border-gray-600 text-center\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">{tech.category}</Badge>\n                        <div className=\"flex gap-1\">\n                          <TechnologyDialog technology={tech}>\n                            <Button size=\"sm\" variant=\"ghost\" className=\"h-6 w-6 p-0\">\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                          </TechnologyDialog>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            className=\"h-6 w-6 p-0\"\n                            onClick={() => deleteTechnology.mutate(tech.id)}\n                            disabled={deleteTechnology.isPending}\n                          >\n                            <Trash2 className=\"w-3 h-3 text-red-400\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <h4 className=\"font-medium text-white text-sm\">{tech.name}</h4>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":13884},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Pencil, Trash2, Users, Briefcase, Code, Mail, LogOut, Settings, BarChart3, Menu, X } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { \n  Contact, \n  PortfolioProject, \n  TeamRole, \n  Technology \n} from '@shared/schema';\n\n// Import dialog components\nimport { PortfolioProjectDialog } from '@/components/admin/portfolio-project-dialog';\nimport { TeamRoleDialog } from '@/components/admin/team-role-dialog';\nimport { TechnologyDialog } from '@/components/admin/technology-dialog';\nimport { ContactsTable } from '@/components/admin/contacts-table';\n\nexport function AdminPage() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Проверка аутентификации\n  useEffect(() => {\n    const isAuthenticated = sessionStorage.getItem('admin_authenticated');\n    if (!isAuthenticated) {\n      setLocation('/admin/login');\n    }\n  }, [setLocation]);\n  \n  // Загрузка данных\n  const { data: contacts = [] } = useQuery<Contact[]>({ queryKey: ['/api/contacts'] });\n  const { data: portfolioProjects = [] } = useQuery<PortfolioProject[]>({ queryKey: ['/api/portfolio-projects'] });\n  const { data: teamRoles = [] } = useQuery<TeamRole[]>({ queryKey: ['/api/team-roles'] });\n  const { data: technologies = [] } = useQuery<Technology[]>({ queryKey: ['/api/technologies'] });\n\n  // Выход из админки\n  const handleLogout = () => {\n    sessionStorage.removeItem('admin_authenticated');\n    setLocation('/');\n    toast({\n      title: \"Выход выполнен\",\n      description: \"Вы вышли из админ-панели\",\n    });\n  };\n\n  // Мутации для удаления\n  const deletePortfolioProject = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/portfolio-projects/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio-projects'] });\n      toast({\n        title: \"Проект удален\",\n        description: \"Проект портфолио успешно удален\",\n      });\n    },\n  });\n\n  const deleteTeamRole = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/team-roles/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-roles'] });\n      toast({\n        title: \"Роль удалена\",\n        description: \"Роль команды успешно удалена\",\n      });\n    },\n  });\n\n  const deleteTechnology = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/technologies/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technologies'] });\n      toast({\n        title: \"Технология удалена\",\n        description: \"Технология успешно удалена\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-gray-900 to-slate-800\">\n      {/* Mobile overlay */}\n      <div \n        className={`fixed inset-0 bg-black/50 z-10 md:hidden transition-opacity duration-300 ${\n          isMobileMenuOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        }`}\n        onClick={() => setIsMobileMenuOpen(false)}\n      ></div>\n      \n      {/* Sidebar */}\n      <div className={`fixed left-0 top-0 h-full w-full sm:w-80 md:w-64 lg:w-72 bg-gradient-to-b from-slate-800 to-slate-900 border-r border-slate-700/50 shadow-2xl backdrop-blur-sm z-20 transition-transform duration-300 ${\n        isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'\n      }`}>\n        <div className=\"p-4 md:p-6\">\n          {/* Mobile close button */}\n          <div className=\"md:hidden flex justify-end mb-4\">\n            <Button\n              onClick={() => setIsMobileMenuOpen(false)}\n              className=\"p-2 bg-slate-700/50 hover:bg-slate-600/50 text-white\"\n              size=\"sm\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Logo Section */}\n          <div className=\"flex items-center gap-3 md:gap-4 mb-8 md:mb-10\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-gradient-to-br from-cyan-400 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Settings className=\"w-5 h-5 md:w-7 md:h-7 text-white\" />\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 md:w-4 md:h-4 bg-green-400 rounded-full border-2 border-slate-800\"></div>\n            </div>\n            <div>\n              <h1 className=\"text-lg md:text-xl font-bold text-white\">Админ панель</h1>\n              <p className=\"text-xs md:text-sm text-cyan-300 font-medium\">VERTEX Studio</p>\n            </div>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"space-y-3\">\n            <div className=\"flex items-center gap-3 px-4 py-3 rounded-xl bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-300 border border-cyan-500/30 shadow-md\">\n              <BarChart3 className=\"w-5 h-5\" />\n              <span className=\"font-semibold\">Дашборд</span>\n            </div>\n            \n            <Button\n              onClick={handleLogout}\n              variant=\"ghost\"\n              className=\"w-full justify-start gap-3 px-4 py-3 text-red-300 hover:text-red-200 hover:bg-red-500/20 rounded-xl transition-all duration-200 border border-transparent hover:border-red-500/30\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n              <span className=\"font-medium\">Выйти</span>\n            </Button>\n          </nav>\n\n          {/* Status Indicator */}\n          <div className=\"mt-6 md:mt-8 p-3 md:p-4 bg-slate-800/50 rounded-xl border border-slate-700/50\">\n            <div className=\"flex items-center gap-2 mb-1 md:mb-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs md:text-sm text-green-300 font-medium\">Система активна</span>\n            </div>\n            <p className=\"text-xs text-slate-400\">API отвечает, данные загружаются</p>\n            <p className=\"text-xs text-slate-500 mt-1\">Определяется автоматически</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"md:ml-64 lg:ml-72 p-4 md:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Mobile Header */}\n          <div className=\"md:hidden mb-6\">\n            <div className=\"flex items-center justify-between p-4 bg-slate-800/50 rounded-xl border border-slate-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <Button\n                  onClick={() => setIsMobileMenuOpen(true)}\n                  className=\"p-2 bg-slate-700/50 hover:bg-slate-600/50 text-white\"\n                  size=\"sm\"\n                >\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n                <div>\n                  <h1 className=\"text-lg font-bold text-white\">Админ панель</h1>\n                  <p className=\"text-sm text-slate-300\">VERTEX Studio</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2 px-3 py-1 bg-slate-700/50 rounded-lg\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-green-300\">Online</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Desktop Header */}\n          <div className=\"mb-6 md:mb-10 hidden md:block\">\n            <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-4\">\n              <div>\n                <h1 className=\"text-2xl md:text-3xl font-bold text-white mb-2\">\n                  Панель управления\n                </h1>\n                <p className=\"text-slate-300 text-sm md:text-lg\">\n                  Управление контентом и настройками сайта\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3 px-4 py-2 bg-slate-800/50 rounded-xl border border-slate-700/50 w-fit\">\n                <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-green-300 font-medium text-sm\">Online</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-10\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-400 mb-1\">Заявки</p>\n                    <p className=\"text-2xl md:text-3xl font-bold text-white\">{contacts.length}</p>\n                    <p className=\"text-xs text-slate-500 mt-1\">Всего получено</p>\n                  </div>\n                  <div className=\"w-12 h-12 md:w-14 md:h-14 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <Mail className=\"w-6 h-6 md:w-7 md:h-7 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-400 mb-1\">Проекты</p>\n                    <p className=\"text-3xl font-bold text-white\">{portfolioProjects.length}</p>\n                    <p className=\"text-xs text-slate-500 mt-1\">В портфолио</p>\n                  </div>\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <Briefcase className=\"w-7 h-7 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-400 mb-1\">Команда</p>\n                    <p className=\"text-3xl font-bold text-white\">{teamRoles.length}</p>\n                    <p className=\"text-xs text-slate-500 mt-1\">Ролей</p>\n                  </div>\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-purple-500 to-violet-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <Users className=\"w-7 h-7 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-400 mb-1\">Технологии</p>\n                    <p className=\"text-3xl font-bold text-white\">{technologies.length}</p>\n                    <p className=\"text-xs text-slate-500 mt-1\">В стеке</p>\n                  </div>\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <Code className=\"w-7 h-7 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Tabs */}\n          <Tabs defaultValue=\"contacts\" className=\"space-y-8\">\n            <TabsList className=\"bg-slate-800/80 border border-slate-700/50 p-2 rounded-xl shadow-xl backdrop-blur-sm flex-wrap gap-2 h-auto\">\n              <TabsTrigger \n                value=\"contacts\" \n                className=\"flex items-center gap-2 px-3 md:px-6 py-2 md:py-3 rounded-lg transition-all duration-200 data-[state=active]:bg-gradient-to-r data-[state=active]:from-cyan-500 data-[state=active]:to-blue-600 data-[state=active]:text-white data-[state=active]:shadow-lg text-slate-300 hover:text-white text-sm md:text-base\"\n              >\n                <Mail className=\"w-4 h-4\" />\n                <span className=\"font-medium hidden sm:inline\">Заявки</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"portfolio\" \n                className=\"flex items-center gap-2 px-3 md:px-6 py-2 md:py-3 rounded-lg transition-all duration-200 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-emerald-600 data-[state=active]:text-white data-[state=active]:shadow-lg text-slate-300 hover:text-white text-sm md:text-base\"\n              >\n                <Briefcase className=\"w-4 h-4\" />\n                <span className=\"font-medium hidden sm:inline\">Портфолио</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"team\" \n                className=\"flex items-center gap-2 px-3 md:px-6 py-2 md:py-3 rounded-lg transition-all duration-200 data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-violet-600 data-[state=active]:text-white data-[state=active]:shadow-lg text-slate-300 hover:text-white text-sm md:text-base\"\n              >\n                <Users className=\"w-4 h-4\" />\n                <span className=\"font-medium hidden sm:inline\">Команда</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"technologies\" \n                className=\"flex items-center gap-2 px-3 md:px-6 py-2 md:py-3 rounded-lg transition-all duration-200 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white data-[state=active]:shadow-lg text-slate-300 hover:text-white text-sm md:text-base\"\n              >\n                <Code className=\"w-4 h-4\" />\n                <span className=\"font-medium hidden sm:inline\">Технологии</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"contacts\">\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl backdrop-blur-sm\">\n                <CardHeader className=\"border-b border-slate-700/50 bg-slate-800/50\">\n                  <CardTitle className=\"text-white flex items-center gap-3 text-xl\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <span className=\"font-bold\">Обращения клиентов</span>\n                    {contacts.length > 0 && (\n                      <Badge className=\"bg-gradient-to-r from-cyan-500 to-blue-600 text-white border-0 ml-auto\">\n                        {contacts.length} заявок\n                      </Badge>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-4 md:p-8\">\n                  <ContactsTable contacts={contacts} />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"portfolio\">\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl backdrop-blur-sm\">\n                <CardHeader className=\"border-b border-slate-700/50 bg-slate-800/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white flex items-center gap-3 text-xl\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center\">\n                        <Briefcase className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <span className=\"font-bold\">Портфолио проектов</span>\n                    </CardTitle>\n                    <PortfolioProjectDialog>\n                      <Button className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-3 md:px-6 py-2\">\n                        <Plus className=\"w-4 h-4 mr-1 md:mr-2\" />\n                        <span className=\"font-medium text-sm md:text-base\">Добавить</span>\n                      </Button>\n                    </PortfolioProjectDialog>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-8\">\n                  {portfolioProjects.length === 0 ? (\n                    <div className=\"text-center py-16\">\n                      <div className=\"mx-auto w-20 h-20 bg-slate-700/50 rounded-full flex items-center justify-center mb-6\">\n                        <Briefcase className=\"w-10 h-10 text-slate-400\" />\n                      </div>\n                      <p className=\"text-slate-300 text-xl font-medium mb-2\">Проектов пока нет</p>\n                      <p className=\"text-slate-400\">Добавьте первый проект в портфолио</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                      {portfolioProjects.map((project) => (\n                        <div key={project.id} className=\"group bg-slate-800/50 border border-slate-700/50 rounded-2xl overflow-hidden hover:shadow-2xl transition-all duration-300 hover:scale-105 backdrop-blur-sm p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <h3 className=\"font-bold text-white text-lg\">{project.title}</h3>\n                            <div className=\"flex gap-2\">\n                              {project.featured && (\n                                <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white border-0 shadow-lg\">\n                                  Рекомендуемый\n                                </Badge>\n                              )}\n                              <PortfolioProjectDialog project={project}>\n                                <Button size=\"sm\" className=\"bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50 transition-all duration-200\">\n                                  <Pencil className=\"w-4 h-4\" />\n                                </Button>\n                              </PortfolioProjectDialog>\n                              <Button \n                                size=\"sm\" \n                                onClick={() => deletePortfolioProject.mutate(project.id)}\n                                disabled={deletePortfolioProject.isPending}\n                                className=\"bg-red-500/20 hover:bg-red-500/30 text-red-400 hover:text-red-300 border-red-500/30 hover:border-red-400/50 transition-all duration-200\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <p className=\"text-slate-300 mb-4 leading-relaxed\">{project.description}</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {project.technologies?.map((tech) => (\n                              <Badge key={tech} className=\"bg-slate-700/50 text-slate-300 border-slate-600/50 hover:bg-slate-600/50 transition-colors\">\n                                {tech}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"team\">\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl backdrop-blur-sm\">\n                <CardHeader className=\"border-b border-slate-700/50 bg-slate-800/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white flex items-center gap-3 text-xl\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-violet-600 rounded-lg flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <span className=\"font-bold\">Роли команды</span>\n                    </CardTitle>\n                    <TeamRoleDialog>\n                      <Button className=\"bg-gradient-to-r from-purple-500 to-violet-600 hover:from-purple-600 hover:to-violet-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-6 py-2\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        <span className=\"font-medium\">Добавить роль</span>\n                      </Button>\n                    </TeamRoleDialog>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-8\">\n                  {teamRoles.length === 0 ? (\n                    <div className=\"text-center py-16\">\n                      <div className=\"mx-auto w-20 h-20 bg-slate-700/50 rounded-full flex items-center justify-center mb-6\">\n                        <Users className=\"w-10 h-10 text-slate-400\" />\n                      </div>\n                      <p className=\"text-slate-300 text-xl font-medium mb-2\">Ролей пока нет</p>\n                      <p className=\"text-slate-400\">Добавьте первую роль для команды</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                      {teamRoles.map((role) => (\n                        <div key={role.id} className=\"group bg-slate-800/50 border border-slate-700/50 rounded-2xl p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105 backdrop-blur-sm\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <h3 className=\"font-bold text-white text-lg\">{role.title}</h3>\n                            <div className=\"flex gap-2\">\n                              <Badge className=\"bg-gradient-to-r from-purple-500 to-violet-600 text-white border-0 shadow-lg\">\n                                {role.count}\n                              </Badge>\n                              <TeamRoleDialog role={role}>\n                                <Button size=\"sm\" className=\"bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50 transition-all duration-200\">\n                                  <Pencil className=\"w-4 h-4\" />\n                                </Button>\n                              </TeamRoleDialog>\n                              <Button \n                                size=\"sm\" \n                                onClick={() => deleteTeamRole.mutate(role.id)}\n                                disabled={deleteTeamRole.isPending}\n                                className=\"bg-red-500/20 hover:bg-red-500/30 text-red-400 hover:text-red-300 border-red-500/30 hover:border-red-400/50 transition-all duration-200\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <p className=\"text-slate-300 leading-relaxed\">{role.description}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"technologies\">\n              <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 shadow-xl backdrop-blur-sm\">\n                <CardHeader className=\"border-b border-slate-700/50 bg-slate-800/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white flex items-center gap-3 text-xl\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center\">\n                        <Code className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <span className=\"font-bold\">Технологии</span>\n                    </CardTitle>\n                    <TechnologyDialog>\n                      <Button className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-6 py-2\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        <span className=\"font-medium\">Добавить технологию</span>\n                      </Button>\n                    </TechnologyDialog>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-8\">\n                  {technologies.length === 0 ? (\n                    <div className=\"text-center py-16\">\n                      <div className=\"mx-auto w-20 h-20 bg-slate-700/50 rounded-full flex items-center justify-center mb-6\">\n                        <Code className=\"w-10 h-10 text-slate-400\" />\n                      </div>\n                      <p className=\"text-slate-300 text-xl font-medium mb-2\">Технологий пока нет</p>\n                      <p className=\"text-slate-400\">Добавьте первую технологию в стек</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n                      {technologies.map((tech) => (\n                        <div key={tech.id} className=\"group bg-slate-800/50 border border-slate-700/50 rounded-2xl p-4 hover:shadow-2xl transition-all duration-300 hover:scale-105 backdrop-blur-sm text-center\">\n                          <div className=\"flex justify-between items-start mb-3\">\n                            <h3 className=\"font-semibold text-white text-sm flex-1 text-left\">{tech.name}</h3>\n                            <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                              <TechnologyDialog technology={tech}>\n                                <Button size=\"sm\" className=\"h-6 w-6 p-0 bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50 transition-all duration-200\">\n                                  <Pencil className=\"w-3 h-3\" />\n                                </Button>\n                              </TechnologyDialog>\n                              <Button \n                                size=\"sm\" \n                                onClick={() => deleteTechnology.mutate(tech.id)}\n                                disabled={deleteTechnology.isPending}\n                                className=\"h-6 w-6 p-0 bg-red-500/20 hover:bg-red-500/30 text-red-400 hover:text-red-300 border-red-500/30 hover:border-red-400/50 transition-all duration-200\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-slate-700/50 text-slate-300 border-slate-600/50 hover:bg-slate-600/50 transition-colors text-xs\">\n                            {tech.category}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29380},"client/src/components/admin/contacts-table.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport type { Contact } from '@shared/schema';\nimport { Mail, Phone, Building, MessageSquare, DollarSign, Briefcase } from 'lucide-react';\n\ninterface ContactsTableProps {\n  contacts: Contact[];\n}\n\nexport function ContactsTable({ contacts }: ContactsTableProps) {\n  if (contacts.length === 0) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"mx-auto w-20 h-20 bg-slate-700/50 rounded-full flex items-center justify-center mb-6\">\n          <Mail className=\"w-10 h-10 text-slate-400\" />\n        </div>\n        <p className=\"text-slate-300 text-xl font-medium mb-2\">Заявок пока нет</p>\n        <p className=\"text-slate-400\">Новые обращения клиентов появятся здесь</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {contacts.map((contact) => (\n        <div key={contact.id} className=\"bg-slate-800/50 border border-slate-700/50 rounded-2xl p-8 hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] backdrop-blur-sm\">\n          <div className=\"flex items-start justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Mail className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-white text-xl\">{contact.name}</h3>\n                <p className=\"text-slate-300 text-lg\">{contact.email}</p>\n              </div>\n            </div>\n            <Badge className=\"bg-gradient-to-r from-cyan-500 to-blue-600 text-white border-0 shadow-lg text-sm px-3 py-1\">\n              {contact.createdAt ? format(new Date(contact.createdAt), 'dd MMM yyyy, HH:mm', { locale: ru }) : 'Дата неизвестна'}\n            </Badge>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n            {contact.phone && (\n              <div className=\"flex items-center gap-3 p-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n                <Phone className=\"w-5 h-5 text-green-400 flex-shrink-0\" />\n                <span className=\"text-slate-200 font-medium\">{contact.phone}</span>\n              </div>\n            )}\n            \n            {contact.company && (\n              <div className=\"flex items-center gap-3 p-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n                <Building className=\"w-5 h-5 text-purple-400 flex-shrink-0\" />\n                <span className=\"text-slate-200 font-medium\">{contact.company}</span>\n              </div>\n            )}\n            \n            {contact.service && (\n              <div className=\"flex items-center gap-3 p-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n                <Briefcase className=\"w-5 h-5 text-orange-400 flex-shrink-0\" />\n                <Badge className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white border-0 shadow-lg\">\n                  {contact.service}\n                </Badge>\n              </div>\n            )}\n            \n            {contact.budget && (\n              <div className=\"flex items-center gap-3 p-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n                <DollarSign className=\"w-5 h-5 text-emerald-400 flex-shrink-0\" />\n                <Badge className=\"bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg\">\n                  {contact.budget}\n                </Badge>\n              </div>\n            )}\n          </div>\n          \n          {contact.message && (\n            <div className=\"mt-6\">\n              <div className=\"p-6 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <MessageSquare className=\"w-5 h-5 text-blue-400 flex-shrink-0\" />\n                  <span className=\"font-semibold text-slate-200\">Сообщение:</span>\n                </div>\n                <p className=\"text-slate-300 leading-relaxed text-lg\">{contact.message}</p>\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":4398},"client/src/components/admin/portfolio-project-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { apiRequest } from '@/lib/queryClient';\nimport { insertPortfolioProjectSchema, type PortfolioProject, type InsertPortfolioProject } from '@shared/schema';\nimport { z } from 'zod';\n\ninterface PortfolioProjectDialogProps {\n  children: React.ReactNode;\n  project?: PortfolioProject;\n}\n\nconst formSchema = insertPortfolioProjectSchema.extend({\n  technologiesText: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function PortfolioProjectDialog({ children, project }: PortfolioProjectDialogProps) {\n  const [open, setOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: project?.title || '',\n      description: project?.description || '',\n      image: project?.image || '',\n      technologiesText: project?.technologies?.join(', ') || '',\n      link: project?.link || '',\n      featured: project?.featured ?? false,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertPortfolioProject) => {\n      if (project) {\n        return apiRequest('PUT', `/api/portfolio-projects/${project.id}`, data);\n      }\n      return apiRequest('POST', '/api/portfolio-projects', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio-projects'] });\n      setOpen(false);\n      form.reset();\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    const technologies = data.technologiesText\n      ? data.technologiesText.split(',').map(t => t.trim()).filter(Boolean)\n      : [];\n    \n    const { technologiesText, ...projectData } = data;\n    mutation.mutate({ ...projectData, technologies });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 text-white max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-xl font-bold\">\n            {project ? 'Редактировать проект' : 'Добавить проект'}\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Название проекта</FormLabel>\n                  <FormControl>\n                    <Input {...field} className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Описание</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20 min-h-[120px]\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">URL изображения</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"https://...\" className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"technologiesText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Технологии (через запятую)</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"React, Node.js, PostgreSQL\" className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"link\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Ссылка на проект</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"https://...\" className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-cyan-400 focus:ring-cyan-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"featured\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between p-4 border border-slate-600/50 rounded-xl bg-slate-800/30\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-slate-300\">Рекомендуемый проект</FormLabel>\n                    <p className=\"text-sm text-slate-400\">\n                      Отображать в топе портфолио\n                    </p>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1 bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50\"\n              >\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white shadow-lg\"\n              >\n                {mutation.isPending ? 'Сохранение...' : 'Сохранить'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7670},"client/src/components/admin/service-project-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { apiRequest } from '@/lib/queryClient';\nimport { insertServiceProjectSchema, type ServiceProject, type InsertServiceProject } from '@shared/schema';\nimport { z } from 'zod';\n\ninterface ServiceProjectDialogProps {\n  children: React.ReactNode;\n  project?: ServiceProject;\n}\n\nconst formSchema = insertServiceProjectSchema.extend({\n  technologiesText: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function ServiceProjectDialog({ children, project }: ServiceProjectDialogProps) {\n  const [open, setOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: project?.title || '',\n      description: project?.description || '',\n      image: project?.image || '',\n      technologiesText: project?.technologies?.join(', ') || '',\n      link: project?.link || '',\n      serviceType: project?.serviceType || 'web-development',\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertServiceProject) => {\n      if (project) {\n        return apiRequest(`/api/service-projects/${project.id}`, 'PUT', data);\n      }\n      return apiRequest('/api/service-projects', 'POST', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-projects'] });\n      setOpen(false);\n      form.reset();\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    const technologies = data.technologiesText\n      ? data.technologiesText.split(',').map(t => t.trim()).filter(Boolean)\n      : [];\n    \n    const { technologiesText, ...projectData } = data;\n    mutation.mutate({ ...projectData, technologies });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"bg-gray-900 border-gray-700 max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">\n            {project ? 'Редактировать проект услуги' : 'Добавить проект услуги'}\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"serviceType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Тип услуги</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                        <SelectValue placeholder=\"Выберите тип услуги\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent className=\"bg-gray-800 border-gray-600\">\n                      <SelectItem value=\"web-development\">Веб-разработка</SelectItem>\n                      <SelectItem value=\"mobile-development\">Мобильная разработка</SelectItem>\n                      <SelectItem value=\"backend-development\">Backend разработка</SelectItem>\n                      <SelectItem value=\"ui-ux-design\">UI/UX Дизайн</SelectItem>\n                      <SelectItem value=\"devops\">DevOps</SelectItem>\n                      <SelectItem value=\"ai-ml\">AI/ML</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Название</FormLabel>\n                  <FormControl>\n                    <Input {...field} className=\"bg-gray-800 border-gray-600 text-white\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Описание</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} className=\"bg-gray-800 border-gray-600 text-white\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">URL изображения</FormLabel>\n                  <FormControl>\n                    <Input {...field} className=\"bg-gray-800 border-gray-600 text-white\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"technologiesText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Технологии (через запятую)</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"React, Node.js, PostgreSQL\" className=\"bg-gray-800 border-gray-600 text-white\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"link\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Ссылка на проект</FormLabel>\n                  <FormControl>\n                    <Input {...field} value={field.value || ''} className=\"bg-gray-800 border-gray-600 text-white\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button \n              type=\"submit\" \n              disabled={mutation.isPending}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n            >\n              {mutation.isPending ? 'Сохранение...' : (project ? 'Сохранить' : 'Добавить')}\n            </Button>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7265},"client/src/components/admin/team-role-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { apiRequest } from '@/lib/queryClient';\nimport { insertTeamRoleSchema, type TeamRole, type InsertTeamRole } from '@shared/schema';\n\ninterface TeamRoleDialogProps {\n  children: React.ReactNode;\n  role?: TeamRole;\n}\n\nexport function TeamRoleDialog({ children, role }: TeamRoleDialogProps) {\n  const [open, setOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTeamRole>({\n    resolver: zodResolver(insertTeamRoleSchema),\n    defaultValues: {\n      title: role?.title || '',\n      description: role?.description || '',\n      count: role?.count || 1,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertTeamRole) => {\n      if (role) {\n        return apiRequest('PUT', `/api/team-roles/${role.id}`, data);\n      }\n      return apiRequest('POST', '/api/team-roles', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/team-roles'] });\n      setOpen(false);\n      form.reset();\n    },\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 text-white max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-xl font-bold\">\n            {role ? 'Редактировать роль' : 'Добавить роль'}\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(mutation.mutate)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Название роли</FormLabel>\n                  <FormControl>\n                    <Input {...field} className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-purple-400 focus:ring-purple-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Описание</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-purple-400 focus:ring-purple-400/20 min-h-[100px]\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"count\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Количество человек</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"number\" \n                      min=\"1\"\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-purple-400 focus:ring-purple-400/20\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1 bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50\"\n              >\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-purple-500 to-violet-600 hover:from-purple-600 hover:to-violet-700 text-white shadow-lg\"\n              >\n                {mutation.isPending ? 'Сохранение...' : 'Сохранить'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4942},"client/src/components/admin/technology-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { apiRequest } from '@/lib/queryClient';\nimport { insertTechnologySchema, type Technology, type InsertTechnology } from '@shared/schema';\n\ninterface TechnologyDialogProps {\n  children: React.ReactNode;\n  technology?: Technology;\n}\n\nconst categories = [\n  'Frontend',\n  'Backend', \n  'Database',\n  'DevOps',\n  'Mobile',\n  'Tools',\n  'Design',\n  'Other'\n];\n\nexport function TechnologyDialog({ children, technology }: TechnologyDialogProps) {\n  const [open, setOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTechnology>({\n    resolver: zodResolver(insertTechnologySchema),\n    defaultValues: {\n      name: technology?.name || '',\n      category: technology?.category || '',\n      icon: technology?.icon || 'Code',\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertTechnology) => {\n      if (technology) {\n        return apiRequest('PUT', `/api/technologies/${technology.id}`, data);\n      }\n      return apiRequest('POST', '/api/technologies', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technologies'] });\n      setOpen(false);\n      form.reset();\n    },\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700/50 text-white max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-xl font-bold\">\n            {technology ? 'Редактировать технологию' : 'Добавить технологию'}\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(mutation.mutate)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Название технологии</FormLabel>\n                  <FormControl>\n                    <Input {...field} className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-orange-400 focus:ring-orange-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Категория</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger className=\"bg-slate-900/50 border-slate-600/50 text-white focus:border-orange-400 focus:ring-orange-400/20\">\n                        <SelectValue placeholder=\"Выберите категорию\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent className=\"bg-slate-800 border-slate-700 text-white\">\n                      {categories.map((category) => (\n                        <SelectItem key={category} value={category} className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"icon\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-slate-300\">Иконка (название из Lucide)</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Code\" className=\"bg-slate-900/50 border-slate-600/50 text-white placeholder:text-slate-400 focus:border-orange-400 focus:ring-orange-400/20\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                onClick={() => setOpen(false)}\n                className=\"flex-1 bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50\"\n              >\n                Отмена\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white shadow-lg\"\n              >\n                {mutation.isPending ? 'Сохранение...' : 'Сохранить'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5624},"client/src/pages/services/3d-webgl.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Brain, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function ThreeDWebGLPage() {\n  const features = [\n    \"Интерактивные 3D сцены и анимации\",\n    \"WebGL оптимизация для браузеров\",\n    \"3D продуктовые конфигураторы\", \n    \"Виртуальные туры и галереи\",\n    \"WebXR и VR/AR приложения\",\n    \"Игры и интерактивные презентации\"\n  ];\n\n  const technologies = [\n    { name: \"Three.js\", description: \"Популярная JavaScript библиотека для 3D графики в браузере\" },\n    { name: \"WebGL\", description: \"Нативная технология для высокопроизводительной 3D графики\" },\n    { name: \"Babylon.js\", description: \"Мощный 3D движок для сложных сцен и игр\" },\n    { name: \"React Three Fiber\", description: \"React рендерер для Three.js с декларативным подходом\" },\n    { name: \"WebXR\", description: \"Стандарт для VR/AR приложений в браузере\" },\n    { name: \"GLSL\", description: \"Язык шейдеров для создания визуальных эффектов\" }\n  ];\n\n  const projects = [\n    { name: \"3D продуктовый конфигуратор\", description: \"Интерактивная настройка автомобиля с реалистичной визуализацией\" },\n    { name: \"Архитектурная визуализация\", description: \"Виртуальный тур по жилому комплексу с WebXR поддержкой\" },\n    { name: \"Обучающая 3D игра\", description: \"Интерактивная анатомия человека для медицинского образования\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Brain className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              3D и WebGL\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Создаем интерактивные 3D веб-приложения, игры и визуализации \n              с использованием передовых WebGL технологий\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 300 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 4-16 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Возможности 3D веб-приложений\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            3D технологии и фреймворки\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Наши 3D проекты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Создадим впечатляющий 3D проект\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Превратим ваши идеи в интерактивные 3D решения нового поколения\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10037},"client/src/pages/services/ai-ml.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Shield, Brain, Bot, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function AIMLPage() {\n  const features = [\n    \"Интеграция с ChatGPT и Claude\",\n    \"Компьютерное зрение и распознавание\",\n    \"Обработка естественного языка\", \n    \"Рекомендательные системы\",\n    \"Анализ данных и предиктивная аналитика\",\n    \"Автоматизация бизнес-процессов с ИИ\"\n  ];\n\n  const technologies = [\n    { name: \"TensorFlow\", description: \"Открытая платформа для машинного обучения от Google\" },\n    { name: \"OpenAI API\", description: \"Интеграция с ChatGPT, GPT-4 и другими моделями OpenAI\" },\n    { name: \"Computer Vision\", description: \"Распознавание изображений и видеоаналитика\" },\n    { name: \"Python ML\", description: \"Scikit-learn, Pandas, NumPy для анализа данных\" },\n    { name: \"Langchain\", description: \"Фреймворк для создания приложений с языковыми моделями\" },\n    { name: \"Hugging Face\", description: \"Готовые модели для NLP и компьютерного зрения\" }\n  ];\n\n  const projects = [\n    { name: \"ИИ чат-бот поддержки\", description: \"Автоматический помощник клиентов с обучением на базе знаний\" },\n    { name: \"Система рекомендаций\", description: \"Персонализированные рекомендации товаров для e-commerce\" },\n    { name: \"Анализ документов\", description: \"Автоматическая обработка и классификация документов\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Shield className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              ИИ и ML\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Внедряем машинное обучение и искусственный интеллект в бизнес-процессы \n              для автоматизации и оптимизации\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 250 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 3-14 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Возможности ИИ решений\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            ИИ технологии и фреймворки\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Наши ИИ проекты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Внедрим ИИ в ваш бизнес\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Автоматизируем процессы и повысим эффективность с помощью современных ИИ решений\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10046},"client/src/pages/services/backend-api.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Cloud, Database, Server, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function BackendAPIPage() {\n  const features = [\n    \"RESTful и GraphQL API разработка\",\n    \"Микросервисная архитектура\",\n    \"Интеграция с базами данных\", \n    \"Масштабируемость и производительность\",\n    \"Безопасность и аутентификация\",\n    \"Документация и тестирование API\"\n  ];\n\n  const technologies = [\n    { name: \"Node.js\", description: \"Высокопроизводительная серверная платформа JavaScript\" },\n    { name: \"Python\", description: \"Универсальный язык для backend разработки и API\" },\n    { name: \"PostgreSQL\", description: \"Надежная реляционная база данных для сложных проектов\" },\n    { name: \"MongoDB\", description: \"NoSQL база данных для гибких схем данных\" },\n    { name: \"Express.js\", description: \"Быстрый и минималистичный веб-фреймворк для Node.js\" },\n    { name: \"FastAPI\", description: \"Современный Python фреймворк для создания API\" }\n  ];\n\n  const projects = [\n    { name: \"E-commerce API\", description: \"Полнофункциональный API для интернет-магазина с платежами\" },\n    { name: \"CRM система\", description: \"Backend для управления клиентскими отношениями\" },\n    { name: \"IoT платформа\", description: \"Сбор и обработка данных с тысяч устройств\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Cloud className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              Backend & API\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Разрабатываем надежные серверные решения, микросервисы и RESTful API \n              для масштабируемых приложений\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 100 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 2-10 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Возможности backend решений\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Backend технологии\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Наши backend проекты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Создадим надежный backend\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Разработаем серверную часть, которая обеспечит стабильную работу вашего проекта\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9895},"client/src/pages/services/devops-cloud.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Rocket, Server, Shield, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function DevOpsCloudPage() {\n  const features = [\n    \"CI/CD автоматизация развертывания\",\n    \"Контейнеризация с Docker и Kubernetes\",\n    \"Мониторинг и логирование системы\", \n    \"Масштабирование в облачных сервисах\",\n    \"Безопасность инфраструктуры\",\n    \"Бэкапы и восстановление данных\"\n  ];\n\n  const technologies = [\n    { name: \"AWS\", description: \"Полный спектр облачных сервисов Amazon Web Services\" },\n    { name: \"Docker\", description: \"Контейнеризация приложений для удобного развертывания\" },\n    { name: \"CI/CD\", description: \"Автоматическая интеграция и развертывание кода\" },\n    { name: \"Kubernetes\", description: \"Оркестрация контейнеров для масштабируемых приложений\" },\n    { name: \"Terraform\", description: \"Инфраструктура как код для управления ресурсами\" },\n    { name: \"Grafana\", description: \"Мониторинг и визуализация метрик приложений\" }\n  ];\n\n  const projects = [\n    { name: \"Автоматизация развертывания\", description: \"CI/CD пайплайн для быстрых и безопасных релизов\" },\n    { name: \"Миграция в облако\", description: \"Перенос инфраструктуры из on-premise в AWS\" },\n    { name: \"Мониторинг системы\", description: \"Комплексная система мониторинга производительности\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Rocket className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              DevOps & Cloud\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Автоматизируем развертывание, настраиваем мониторинг и обеспечиваем \n              масштабирование в облачных сервисах\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 120 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 2-8 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Возможности DevOps решений\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            DevOps технологии и инструменты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Наши DevOps проекты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Оптимизируем вашу инфраструктуру\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Настроим автоматизацию и мониторинг для стабильной работы ваших сервисов\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10052},"client/src/pages/services/mobile-development.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Smartphone, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function MobileDevelopmentPage() {\n  const features = [\n    \"Нативные iOS и Android приложения\",\n    \"Кроссплатформенная разработка\",\n    \"Современный UI/UX дизайн\",\n    \"Интеграция с API и базами данных\", \n    \"Push-уведомления и офлайн режим\",\n    \"Публикация в App Store и Google Play\"\n  ];\n\n  const technologies = [\n    { name: \"React Native\", description: \"Кроссплатформенная разработка с одним кодом для iOS и Android\" },\n    { name: \"Flutter\", description: \"Google фреймворк для создания красивых мобильных приложений\" },\n    { name: \"Swift/iOS\", description: \"Нативная разработка для iPhone и iPad\" },\n    { name: \"Kotlin/Java\", description: \"Нативная Android разработка\" },\n    { name: \"Firebase\", description: \"Backend-платформа для мобильных приложений\" },\n    { name: \"Redux/MobX\", description: \"Управление состоянием в мобильных приложениях\" }\n  ];\n\n  const projects = [\n    { name: \"Фитнес приложение\", description: \"Трекинг активности с интеграцией носимых устройств\" },\n    { name: \"Финтех решение\", description: \"Мобильный банкинг с биометрической аутентификацией\" },\n    { name: \"Доставка еды\", description: \"Приложение для заказа еды с геолокацией и оплатой\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Smartphone className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              Мобильная Разработка\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Создаем нативные и кроссплатформенные мобильные приложения с современным UX \n              для iOS и Android платформ\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 200 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 3-12 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Возможности мобильной разработки\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Технологии разработки\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Наши мобильные проекты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Запустим ваше мобильное приложение\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Разработаем мобильное приложение, которое поможет развить ваш бизнес\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9976},"client/src/pages/services/web-development.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Box, Globe, Smartphone, ArrowRight, CheckCircle } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function WebDevelopmentPage() {\n  const features = [\n    \"Адаптивный дизайн для всех устройств\",\n    \"Высокая производительность и SEO оптимизация\", \n    \"Современные технологии и фреймворки\",\n    \"Интеграция с базами данных и API\",\n    \"Безопасность и защита данных\",\n    \"Поддержка и обновления после запуска\"\n  ];\n\n  const technologies = [\n    { name: \"React\", description: \"Современная библиотека для создания пользовательских интерфейсов\" },\n    { name: \"Vue.js\", description: \"Прогрессивный фреймворк для создания веб-приложений\" },\n    { name: \"Next.js\", description: \"Полнофункциональный React фреймворк для продакшена\" },\n    { name: \"TypeScript\", description: \"Типизированный JavaScript для больших проектов\" },\n    { name: \"Node.js\", description: \"Серверная платформа для JavaScript\" },\n    { name: \"MongoDB/PostgreSQL\", description: \"Современные базы данных для хранения данных\" }\n  ];\n\n  const projects = [\n    { name: \"E-commerce платформа\", description: \"Полнофункциональный интернет-магазин с корзиной и оплатой\" },\n    { name: \"Корпоративный портал\", description: \"Внутренняя система управления для крупной компании\" },\n    { name: \"Образовательная платформа\", description: \"Онлайн школа с видеоуроками и тестированием\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      {/* Навигация */}\n      <nav className=\"fixed top-0 w-full z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                className=\"text-2xl font-bold text-neon-cyan cursor-pointer\"\n              >\n                VERTEX Studio\n              </motion.div>\n            </Link>\n            <Link href=\"/#services\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                className=\"px-6 py-2 bg-neon-cyan/10 text-neon-cyan rounded-lg hover:bg-neon-cyan/20 transition-colors\"\n              >\n                Назад к услугам\n              </motion.button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Герой секция */}\n      <section className=\"pt-32 pb-16 relative overflow-hidden\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"w-24 h-24 bg-neon-cyan/10 rounded-3xl flex items-center justify-center mx-auto mb-8\">\n              <Box className=\"w-12 h-12 text-neon-cyan\" />\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-neon-cyan to-white bg-clip-text text-transparent\">\n              Веб-Разработка\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-400 mb-8 leading-relaxed\">\n              Создаем современные веб-приложения от простых лендингов до сложных корпоративных систем \n              с использованием передовых технологий и лучших практик разработки\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan text-black rounded-lg font-semibold\"\n              >\n                От 150 000 ₽\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                className=\"px-8 py-3 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30\"\n              >\n                Срок: 2-8 недель\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Преимущества */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Что вы получите\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                className=\"flex items-start gap-4\"\n              >\n                <CheckCircle className=\"w-6 h-6 text-neon-cyan flex-shrink-0 mt-1\" />\n                <p className=\"text-gray-300\">{feature}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Технологии */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Технологии и инструменты\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {technologies.map((tech, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3 text-neon-cyan\">{tech.name}</h3>\n                <p className=\"text-gray-400\">{tech.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Примеры проектов */}\n      <section className=\"py-16 bg-gray-900/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl font-bold text-center mb-16\"\n          >\n            Примеры наших проектов\n          </motion.h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {projects.map((project, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                whileHover={{ scale: 1.02, y: -5 }}\n                className=\"glass-morphism p-6 rounded-2xl group cursor-pointer\"\n              >\n                <h3 className=\"text-xl font-semibold mb-3\">{project.name}</h3>\n                <p className=\"text-gray-400 mb-4\">{project.description}</p>\n                <div className=\"flex items-center text-neon-cyan group-hover:translate-x-2 transition-transform\">\n                  <span className=\"mr-2\">Подробнее</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA секция */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center max-w-3xl mx-auto\"\n          >\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Готовы начать проект?\n            </h2>\n            <p className=\"text-xl text-gray-400 mb-8\">\n              Обсудим ваши задачи и предложим оптимальное решение для вашего бизнеса\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan text-black rounded-lg font-semibold text-lg\"\n                >\n                  Обсудить проект\n                </motion.button>\n              </Link>\n              \n              <Link href=\"/#services\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-8 py-4 bg-neon-cyan/10 text-neon-cyan rounded-lg border border-neon-cyan/30 font-semibold text-lg\"\n                >\n                  Другие услуги\n                </motion.button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10191}}}